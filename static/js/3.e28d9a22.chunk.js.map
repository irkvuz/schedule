{"version":3,"sources":["../../src/severity.ts","../../src/status.ts","../../src/transport.ts","../../src/version.ts","../../src/polyfill.ts","../../src/error.ts","../../src/dsn.ts","../../src/integration.ts","../../src/baseclient.ts","../../../src/transports/noop.ts","../../src/basebackend.ts","../../src/supports.ts","../../src/tracekit.ts","../../src/parsers.ts","../../src/eventbuilder.ts","../../src/request.ts","../../src/api.ts","../../src/promisebuffer.ts","../../../src/transports/utils.ts","../../src/async.ts","../../../src/transports/base.ts","../../../src/transports/fetch.ts","../../../src/transports/xhr.ts","../../src/backend.ts","../../src/helpers.ts","../../src/instrument.ts","../../../src/integrations/functiontostring.ts","../../../src/integrations/breadcrumbs.ts","../../src/client.ts","../../../src/integrations/inboundfilters.ts","../../../src/integrations/trycatch.ts","../../../src/integrations/globalhandlers.ts","../../../src/integrations/linkederrors.ts","../../../src/integrations/dedupe.ts","../../../src/integrations/useragent.ts","../../src/sdk.ts","../../src/index.ts"],"names":["Severity","Status","fromString","level","Debug","Info","Warning","Error","Fatal","Critical","Log","fromHttpCode","code","Success","RateLimit","Invalid","Failed","Unknown","Outcome","setPrototypeOf","Object","__proto__","Array","obj","proto","prop","prototype","hasOwnProperty","call","message","name","constructor","DSN_REGEX","from","this","_fromString","_fromComponents","_validate","toString","withPassword","host","path","pass","port","projectId","protocol","publicKey","str","match","exec","split","length","slice","join","pop","projectMatch","components","user","forEach","component","ERROR_MESSAGE","isNaN","parseInt","installedIntegrations","filterDuplicates","integrations","reduce","acc","every","accIntegration","push","setupIntegrations","options","defaultIntegrations","userIntegrations","isArray","filter","userIntegration","integrationsNames","map","i","indexOf","splice","getIntegrationsToSetup","integration","setupOnce","logger","log","setupIntegration","defineProperty","value","ALREADY_SEEN_ERROR","backendClass","_integrations","_numProcessing","_backend","_options","dsn","_dsn","captureException","exception","hint","scope","eventId","event_id","_process","_getBackend","eventFromException","then","event","_captureEvent","result","captureMessage","promisedEvent","is","eventFromMessage","String","captureEvent","originalException","captureSession","session","_isEnabled","release","warn","_sendSession","update","init","getDsn","getOptions","getTransport","flush","timeout","_isClientDoneProcessing","clientFinished","close","transportFlushed","enabled","initialized","getIntegration","id","_oO","_updateSessionFromEvent","crashed","errored","exceptions","values","mechanism","handled","sessionNonTerminal","status","Ok","errors","Crashed","Number","sendSession","resolve","ticked","interval","setInterval","clearInterval","undefined","_prepareEvent","normalizeDepth","prepared","timestamp","_applyClientOptions","_applyIntegrationsMetadata","finalScope","captureContext","clone","applyToEvent","evt","_normalizeEvent","depth","normalized","breadcrumbs","b","data","contexts","extra","trace","_experiments","ensureNoCircularStructures","environment","dist","maxValueLength","request","url","integrationsArray","keys","sdk","_sendEvent","sendEvent","_processEvent","finalEvent","reason","error","beforeSend","sampleRate","transport","reject","isTransaction","type","Math","random","recordLostEvent","SampleRate","EventProcessor","__sentry__","beforeSendResult","_ensureBeforeSendRv","processedEvent","BeforeSend","getSession","promise","rv","nullErr","e","_","Skipped","_transport","_setupTransport","_exception","_hint","_message","_level","supportsFetch","Headers","Request","Response","isNativeFetch","func","test","supportsReferrerPolicy","referrerPolicy","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","computeStackTrace","ex","stack","popSize","framesToPop","stacktrace","parts","opera10Regex","opera11Regex","lines","line","element","args","column","extractMessage","computeStackTraceFromStacktraceProp","popFrames","submatch","isNative","substr","columnNumber","computeStackTraceFromStackProp","failed","extractSafariExtensionDetails","isSafariExtension","isSafariWebExtension","exceptionFromStacktrace","frames","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","filename","function","in_app","lineno","reverse","eventFromUnknownInput","syntheticException","attachStacktrace","eventFromString","domException","tags","rejection","__serialized__","eventFromPlainObject","synthetic","input","getSdkMetadataForEnvelopeHeader","api","metadata","version","enhanceEventWithSdkInfo","sdkInfo","packages","sessionToSentryRequest","body","JSON","stringify","sent_at","Date","toISOString","forceEnvelope","getEnvelopeEndpointWithUrlEncodedAuth","eventToSentryRequest","eventType","useEnvelope","transactionSampling","method","rate","debug_meta","req","getStoreEndpointWithUrlEncodedAuth","envelope","sample_rates","samplingMethod","tunnel","_dsnObject","_tunnel","getBaseApiEndpoint","getStoreEndpoint","_getIngestEndpoint","_encodedAuth","_getEnvelopeEndpoint","getStoreEndpointPath","getRequestHeaders","clientName","clientVersion","header","getReportDialogEndpoint","dialogOptions","endpoint","encodedOptions","key","encodeURIComponent","email","target","auth","sentry_key","sentry_version","_limit","_buffer","isReady","add","taskProducer","task","remove","drain","capturedSetTimeout","setTimeout","all","clearTimeout","cachedFetchImpl","getNativeFetchImplementation","fetch","bind","document","fetchImpl","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","sendReport","navigator","sendBeacon","credentials","keepalive","console","CATEGORY_MAPPING","transaction","attachment","_rateLimits","_outcomes","_api","_metadata","sendClientReports","addEventListener","visibilityState","_flushOutcomes","category","outcomes","discarded_events","quantity","_handleResponse","requestType","response","headers","_handleRateLimit","_disabledUntil","_isRateLimited","now","rlHeader","raHeader","trim","parameters","headerDelay","delay","_fetch","_sendRequest","sentryRequest","originalPayload","RateLimitBackoff","Promise","fetchParameters","assign","get","catch","QueueOverflow","NetworkError","XMLHttpRequest","onreadystatechange","readyState","getResponseHeader","open","setRequestHeader","send","transportOptions","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","wrap","fn","before","__sentry_wrapped__","sentryWrapped","arguments","apply","wrappedArguments","arg","handleEvent","addEventProcessor","property","enumerable","defineProperties","__sentry_original__","getOwnPropertyDescriptor","configurable","injectReportDialog","script","async","src","onLoad","onload","injectionPoint","lastHref","handlers","instrumented","instrument","originalConsoleLevel","triggerHandlers","Function","instrumentConsole","triggerDOMHandler","globalDOMEventHandler","makeDOMEventHandler","originalAddEventListener","listener","__sentry_instrumentation_handlers__","handlerForType","refCount","handler","originalRemoveEventListener","instrumentDOM","requestKeys","requestValues","xhrproto","originalOpen","xhr","__sentry_xhr__","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","status_code","requestPos","endTimestamp","startTimestamp","original","readyStateArgs","originalSend","instrumentXHR","global","doc","err","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","callback","fetchArgs","debounceTimerID","lastCapturedEvent","globalListener","tagName","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","originalFunctionToString","Breadcrumbs","dom","sentry","addSentryBreadcrumb","addBreadcrumb","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","breadcrumb","keyAttrs","serializeAttribute","parsedLoc","parsedFrom","parsedTo","relative","SDK_VERSION","showReportDialog","platform","FunctionToString","context","DEFAULT_IGNORE_ERRORS","InboundFilters","hub","self","client","getClient","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","pattern","denyUrls","allowUrls","whitelistUrls","blacklistUrls","oO","_getLastValidUrl","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","originalCallback","eventName","wrappedEventHandler","originalEventHandler","xmlHttpRequestProps","wrapOptions","GlobalHandlers","_onErrorHandlerInstalled","_onUnhandledRejectionHandlerInstalled","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","detail","_eventFromRejectionWithPrimitive","groups","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","Dedupe","addGlobalEventProcessor","getCurrentHub","currentEvent","_previousEvent","previousEvent","_isSameMessageEvent","_isSameExceptionEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_getFramesFromEvent","currentFrames","previousFrames","frameA","frameB","_getExceptionFromEvent","previousException","currentException","currentFingerprint","fingerprint","previousFingerprint","UserAgent","referrer","userAgent","Referer","SENTRY_RELEASE","autoSessionTracking","initAndBind","startSession","ignoreDuration","startSessionTracking","getScope","getUser","lastEventId","forceLoad","SDK_NAME","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS"],"mappings":"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","file":"static/js/3.e28d9a22.chunk.js","sourcesContent":["/** JSDoc */\n// eslint-disable-next-line import/export\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\n// eslint-disable-next-line import/export\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error occurred during submission. */\n  Failed = 'failed',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","import { DsnLike } from './dsn';\nimport { Event } from './event';\nimport { SentryRequestType } from './request';\nimport { Response } from './response';\nimport { SdkMetadata } from './sdkmetadata';\nimport { Session, SessionAggregates } from './session';\n\nexport enum Outcome {\n  BeforeSend = 'before_send',\n  EventProcessor = 'event_processor',\n  NetworkError = 'network_error',\n  QueueOverflow = 'queue_overflow',\n  RateLimitBackoff = 'ratelimit_backoff',\n  SampleRate = 'sample_rate',\n}\n\n/** Transport used sending data to Sentry */\nexport interface Transport {\n  /**\n   * Sends the event to the Store endpoint in Sentry.\n   *\n   * @param event Event that should be sent to Sentry.\n   */\n  sendEvent(event: Event): PromiseLike<Response>;\n\n  /**\n   * Sends the session to the Envelope endpoint in Sentry.\n   *\n   * @param session Session that should be sent to Sentry | Session Aggregates that should be sent to Sentry.\n   */\n  sendSession?(session: Session | SessionAggregates): PromiseLike<Response>;\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the transport should wait for events to be flushed. Omitting this parameter will\n   *   cause the transport to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  close(timeout?: number): PromiseLike<boolean>;\n\n  /**\n   * Increment the counter for the specific client outcome\n   */\n  recordLostEvent?(type: Outcome, category: SentryRequestType): void;\n}\n\n/** JSDoc */\nexport type TransportClass<T extends Transport> = new (options: TransportOptions) => T;\n\n/** JSDoc */\nexport interface TransportOptions {\n  /** Sentry DSN */\n  dsn: DsnLike;\n  /** Define custom headers */\n  headers?: { [key: string]: string };\n  /** Set a HTTP proxy that should be used for outbound requests. */\n  httpProxy?: string;\n  /** Set a HTTPS proxy that should be used for outbound requests. */\n  httpsProxy?: string;\n  /** HTTPS proxy certificates path */\n  caCerts?: string;\n  /** Fetch API init parameters */\n  fetchParameters?: { [key: string]: string };\n  /** The envelope tunnel to use. */\n  tunnel?: string;\n  /** Send SDK Client Reports. Enabled by default. */\n  sendClientReports?: boolean;\n  /**\n   * Set of metadata about the SDK that can be internally used to enhance envelopes and events,\n   * and provide additional data about every request.\n   * */\n  _metadata?: SdkMetadata;\n}\n","// TODO: Remove in the next major release and rely only on @sentry/core SDK_VERSION and SdkInfo metadata\nexport const SDK_NAME = 'sentry.javascript.browser';\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key (deprecated, renamed to publicKey). */\n  public user!: string;\n  /** Public authorization key. */\n  public publicKey!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, publicKey } = this;\n    return (\n      `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n    this.user = components.publicKey || '';\n\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n} & { initialized?: boolean };\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  Object.defineProperty(integrations, 'initialized', { value: true });\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Outcome,\n  SessionStatus,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  Dsn,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === SessionStatus.Ok;\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: SessionStatus.Crashed }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    const { _experiments = {} } = this.getOptions();\n    if (_experiments.ensureNoCircularStructures) {\n      return normalize(normalized);\n    }\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      transport.recordLostEvent?.(Outcome.SampleRate, 'event');\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          transport.recordLostEvent?.(Outcome.EventProcessor, event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return this._ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          transport.recordLostEvent?.(Outcome.BeforeSend, event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Verifies that return value of configured `beforeSend` is of expected type.\n   */\n  protected _ensureBeforeSendRv(\n    rv: PromiseLike<Event | null> | Event | null,\n  ): PromiseLike<Event | null> | Event | null {\n    const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n    if (isThenable(rv)) {\n      return (rv as PromiseLike<Event | null>).then(\n        event => {\n          if (!(isPlainObject(event) || event === null)) {\n            throw new SentryError(nullErr);\n          }\n          return event;\n        },\n        e => {\n          throw new SentryError(`beforeSend rejected with ${e}`);\n        },\n      );\n    } else if (!(isPlainObject(rv) || rv === null)) {\n      throw new SentryError(nullErr);\n    }\n    return rv;\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    void this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    void this._transport.sendSession(session).then(null, reason => {\n      logger.error(`Error while sending session: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, max-lines */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex: any): StackTrace {\n  let stack = null;\n  let popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n\n      // Arpad: Working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n      // prefix here seems like the quickest solution for now.\n      let url = parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2];\n      // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n      // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n      let func = parts[1] || UNKNOWN_FUNCTION;\n      [func, url] = extractSafariExtensionDetails(func, url);\n\n      element = {\n        url,\n        func,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n\n      let url = parts[3];\n      let func = parts[1] || UNKNOWN_FUNCTION;\n      [func, url] = extractSafariExtensionDetails(func, url);\n\n      element = {\n        url,\n        func,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunatelly \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, url: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${url}` : `safari-web-extension:${url}`,\n      ]\n    : [func, url];\n};\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  rejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event, EventHint, Options, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromException(options: Options, exception: unknown, hint?: EventHint): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  options: Options,\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    // eslint-disable-next-line no-param-reassign\n    exception = errorEvent.error;\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromStacktrace(computeStackTrace(exception as Error));\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(message, syntheticException, options);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { Event, SdkInfo, SentryRequest, SentryRequestType, Session, SessionAggregates } from '@sentry/types';\n\nimport { API } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: API): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: API): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(api.forceEnvelope() && { dsn: api.getDsn().toString() }),\n  });\n  // I know this is hacky but we don't want to add `session` to request type since it's never rate limited\n  const type: SentryRequestType = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n  const itemHeaders = JSON.stringify({\n    type,\n  });\n\n  return {\n    body: `${envelopeHeaders}\\n${itemHeaders}\\n${JSON.stringify(session)}`,\n    type,\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || api.forceEnvelope();\n\n  const { transactionSampling, ...metadata } = event.debug_meta || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n  if (Object.keys(metadata).length === 0) {\n    delete event.debug_meta;\n  } else {\n    event.debug_meta = metadata;\n  }\n\n  const req: SentryRequest = {\n    body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    type: eventType,\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(api.forceEnvelope() && { dsn: api.getDsn().toString() }),\n    });\n    const itemHeaders = JSON.stringify({\n      type: eventType,\n\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","import { DsnLike, SdkMetadata } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this.getDsn();\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    if (this.forceEnvelope()) {\n      return this._tunnel as string;\n    }\n\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this.getDsn();\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    const dsn = this.getDsn();\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.publicKey}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this.getDsn();\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    if (this._tunnel) {\n      return this._tunnel;\n    }\n    const base = this.getBaseApiEndpoint();\n    const dsn = this.getDsn();\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this.getDsn();\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  public add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    void task\n      .then(() => this.remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add another catch here because `this.remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      void SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { forget, getGlobalObject, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof document?.createElement === `function`) {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        fetchImpl = sandbox.contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    return sendBeacon(url, body);\n  }\n\n  if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    return forget(\n      fetch(url, {\n        body,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      }),\n    );\n  }\n}\n","/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function forget(promise: PromiseLike<any>): void {\n  void promise.then(null, e => {\n    // TODO: Use a better logging mechanism\n    // eslint-disable-next-line no-console\n    console.error(e);\n  });\n}\n","import { API } from '@sentry/core';\nimport {\n  Event,\n  Outcome,\n  Response as SentryResponse,\n  SentryRequestType,\n  Status,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  getGlobalObject,\n  logger,\n  parseRetryAfterHeader,\n  PromiseBuffer,\n  SentryError,\n} from '@sentry/utils';\n\nimport { sendReport } from './utils';\n\nconst CATEGORY_MAPPING: {\n  [key in SentryRequestType]: string;\n} = {\n  event: 'error',\n  transaction: 'transaction',\n  session: 'session',\n  attachment: 'attachment',\n};\n\nconst global = getGlobalObject<Window>();\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = new PromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected readonly _rateLimits: Record<string, Date> = {};\n\n  protected _outcomes: { [key: string]: number } = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', () => {\n        if (global.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<SentryResponse> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordLostEvent(reason: Outcome, category: SentryRequestType): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    const key = `${CATEGORY_MAPPING[category]}:${reason}`;\n    logger.log(`Adding outcome: ${key}`);\n    this._outcomes[key] = (this._outcomes[key] ?? 0) + 1;\n  }\n\n  /**\n   * Send outcomes as an envelope\n   */\n  protected _flushOutcomes(): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      logger.log('No outcomes to flush');\n      return;\n    }\n\n    logger.log(`Flushing outcomes:\\n${JSON.stringify(outcomes, null, 2)}`);\n\n    const url = this._api.getEnvelopeEndpointWithUrlEncodedAuth();\n    // Envelope header is required to be at least an empty object\n    const envelopeHeader = JSON.stringify({ ...(this.options.tunnel && { dsn: this._api.getDsn().toString() }) });\n    const itemHeaders = JSON.stringify({\n      type: 'client_report',\n    });\n    const item = JSON.stringify({\n      timestamp: dateTimestampInSeconds(),\n      discarded_events: Object.keys(outcomes).map(key => {\n        const [category, reason] = key.split(':');\n        return {\n          reason,\n          category,\n          quantity: outcomes[key],\n        };\n      }),\n    });\n    const envelope = `${envelopeHeader}\\n${itemHeaders}\\n${item}`;\n\n    try {\n      sendReport(url, envelope);\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = Status.fromHttpCode(response.status);\n    /**\n     * \"The name is case-insensitive.\"\n     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n     */\n    const limited = this._handleRateLimit(headers);\n    if (limited)\n      logger.warn(`Too many ${requestType} requests, backing off until: ${this._disabledUntil(requestType)}`);\n\n    if (status === Status.Success) {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = CATEGORY_MAPPING[requestType];\n    return this._rateLimits[category] || this._rateLimits.all;\n  }\n\n  /**\n   * Checks if a category is rate limited\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    return this._disabledUntil(requestType) > new Date(Date.now());\n  }\n\n  /**\n   * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.\n   */\n  protected _handleRateLimit(headers: Record<string, string | null>): boolean {\n    const now = Date.now();\n    const rlHeader = headers['x-sentry-rate-limits'];\n    const raHeader = headers['retry-after'];\n\n    if (rlHeader) {\n      // rate limit headers are of the form\n      //     <header>,<header>,..\n      // where each <header> is of the form\n      //     <retry_after>: <categories>: <scope>: <reason_code>\n      // where\n      //     <retry_after> is a delay in ms\n      //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n      //         <category>;<category>;...\n      //     <scope> is what's being limited (org, project, or key) - ignored by SDK\n      //     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n      for (const limit of rlHeader.trim().split(',')) {\n        const parameters = limit.split(':', 2);\n        const headerDelay = parseInt(parameters[0], 10);\n        const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        for (const category of parameters[1].split(';')) {\n          this._rateLimits[category || 'all'] = new Date(now + delay);\n        }\n      }\n      return true;\n    } else if (raHeader) {\n      this._rateLimits.all = new Date(now + parseRetryAfterHeader(now, raHeader));\n      return true;\n    }\n    return false;\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Outcome, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent(Outcome.RateLimitBackoff, sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent(Outcome.QueueOverflow, sentryRequest.type);\n        } else {\n          this.recordLostEvent(Outcome.NetworkError, sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Outcome, Response, SentryRequest, Session } from '@sentry/types';\nimport { SentryError, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent(Outcome.RateLimitBackoff, sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = (): void => {\n              if (request.readyState === 4) {\n                const headers = {\n                  'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                  'retry-after': request.getResponseHeader('Retry-After'),\n                };\n                this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n              }\n            };\n\n            request.open('POST', sentryRequest.url);\n            for (const header in this.options.headers) {\n              if (Object.prototype.hasOwnProperty.call(this.options.headers, header)) {\n                request.setRequestHeader(header, this.options.headers[header]);\n              }\n            }\n            request.send(sentryRequest.body);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent(Outcome.QueueOverflow, sentryRequest.type);\n        } else {\n          this.recordLostEvent(Outcome.NetworkError, sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { API, captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!global.document) {\n    return;\n  }\n\n  if (!options.eventId) {\n    logger.error(`Missing eventId option in showReportDialog call`);\n    return;\n  }\n\n  if (!options.dsn) {\n    logger.error(`Missing dsn option in showReportDialog call`);\n    return;\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = new API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  }\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(originalAddEventListener: AddEventListener): AddEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type];\n\n            if (handlerForType) {\n              handlerForType.refCount -= 1;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof this._options.dom === 'object' ? this._options.dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString((handlerData.event as unknown) as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n","import { BaseClient, Scope, SDK_VERSION } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        // This checks prevents most of the occurrences of the bug linked below:\n        // https://github.com/getsentry/sentry-javascript/issues/2622\n        // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.\n        // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),\n        // as we cannot force people using multiple instances in their apps to sync SDK versions.\n        const options = typeof self._mergeOptions === 'function' ? self._mergeOptions(clientOptions) : {};\n        if (typeof self._shouldDropEvent !== 'function') {\n          return event;\n        }\n        return self._shouldDropEvent(event, options) ? null : event;\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getLastValidUrl(frames: StackFrame[] = []): string | null {\n    for (let i = frames.length - 1; i >= 0; i--) {\n      const frame = frames[i];\n\n      if (frame?.filename !== '<anonymous>' && frame?.filename !== '[native code]') {\n        return frame.filename || null;\n      }\n    }\n\n    return null;\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return this._getLastValidUrl(frames);\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return this._getLastValidUrl(frames);\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, callback: () => void): () => void {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const global = getGlobalObject() as { [key: string]: any };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = global[target] && global[target].prototype;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = (fn as unknown) as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler?.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fill(xhr, prop, function(original: WrappedFunction): () => any {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event =\n          error === undefined && isString(data.msg)\n            ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n            : this._enhanceEventWithInitialFrame(\n                eventFromUnknownInput(error || data.msg, undefined, {\n                  attachStacktrace: client && client.getOptions().attachStacktrace,\n                  rejection: false,\n                }),\n                data.url,\n                data.line,\n                data.column,\n              );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromRejectionWithPrimitive(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    const groups = message.match(ERROR_TYPES_RE);\n    if (groups) {\n      name = groups[1];\n      message = groups[2];\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  private _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n            value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        const handler = self._handler && self._handler.bind(self);\n        return typeof handler === 'function' ? handler(event, hint) : event;\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (self._shouldDropEvent(currentEvent, self._previousEvent)) {\n            logger.warn(`Event dropped due to being a duplicate of previously captured event.`);\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n    if (!previousEvent) {\n      return false;\n    }\n\n    if (this._isSameMessageEvent(currentEvent, previousEvent)) {\n      return true;\n    }\n\n    if (this._isSameExceptionEvent(currentEvent, previousEvent)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n    const currentMessage = currentEvent.message;\n    const previousMessage = previousEvent.message;\n\n    // If neither event has a message property, they were both exceptions, so bail out\n    if (!currentMessage && !previousMessage) {\n      return false;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n      return false;\n    }\n\n    if (currentMessage !== previousMessage) {\n      return false;\n    }\n\n    if (!this._isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this._isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n    const exception = event.exception;\n\n    if (exception) {\n      try {\n        // @ts-ignore Object could be undefined\n        return exception.values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    }\n    return undefined;\n  }\n\n  /** JSDoc */\n  private _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n    let currentFrames = this._getFramesFromEvent(currentEvent);\n    let previousFrames = this._getFramesFromEvent(previousEvent);\n\n    // If neither event has a stacktrace, they are assumed to be the same\n    if (!currentFrames && !previousFrames) {\n      return true;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n      return false;\n    }\n\n    currentFrames = currentFrames as StackFrame[];\n    previousFrames = previousFrames as StackFrame[];\n\n    // If number of frames differ, they are not the same\n    if (previousFrames.length !== currentFrames.length) {\n      return false;\n    }\n\n    // Otherwise, compare the two\n    for (let i = 0; i < previousFrames.length; i++) {\n      const frameA = previousFrames[i];\n      const frameB = currentFrames[i];\n\n      if (\n        frameA.filename !== frameB.filename ||\n        frameA.lineno !== frameB.lineno ||\n        frameA.colno !== frameB.colno ||\n        frameA.function !== frameB.function\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private _getExceptionFromEvent(event: Event): Exception | undefined {\n    return event.exception && event.exception.values && event.exception.values[0];\n  }\n\n  /** JSDoc */\n  private _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n    const previousException = this._getExceptionFromEvent(previousEvent);\n    const currentException = this._getExceptionFromEvent(currentEvent);\n\n    if (!previousException || !currentException) {\n      return false;\n    }\n\n    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n      return false;\n    }\n\n    if (!this._isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this._isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n    let currentFingerprint = currentEvent.fingerprint;\n    let previousFingerprint = previousEvent.fingerprint;\n\n    // If neither event has a fingerprint, they are assumed to be the same\n    if (!currentFingerprint && !previousFingerprint) {\n      return true;\n    }\n\n    // If only one event has a fingerprint, but not the other one, they are not the same\n    if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n      return false;\n    }\n\n    currentFingerprint = currentFingerprint as string[];\n    previousFingerprint = previousFingerprint as string[];\n\n    // Otherwise, compare the two\n    try {\n      return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n    } catch (_oO) {\n      return false;\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  const client = hub.getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  logger.warn('Cannot flush events. No client defined.');\n  return SyncPromise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return SyncPromise.resolve(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (typeof hub.startSession !== 'function' || typeof hub.captureSession !== 'function') {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler({\n    callback: ({ from, to }) => {\n      // Don't create an additional session for the initial route or if the location did not change\n      if (from === undefined || from === to) {\n        return;\n      }\n      hub.startSession({ ignoreDuration: true });\n      hub.captureSession();\n    },\n    type: 'history',\n  });\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n"],"sourceRoot":""}