{"version":3,"sources":["../../src/severity.ts","../../src/status.ts","../../src/polyfill.ts","../../src/error.ts","../../src/dsn.ts","../../src/integration.ts","../../src/baseclient.ts","../../../src/transports/noop.ts","../../src/basebackend.ts","../../src/supports.ts","../../src/tracekit.ts","../../src/parsers.ts","../../src/eventbuilder.ts","../../src/request.ts","../../src/api.ts","../../src/promisebuffer.ts","../../../src/transports/base.ts","../../../src/transports/fetch.ts","../../../src/transports/xhr.ts","../../src/backend.ts","../../src/helpers.ts","../../src/instrument.ts","../../../src/integrations/functiontostring.ts","../../../src/integrations/breadcrumbs.ts","../../src/version.ts","../../src/client.ts","../../../src/integrations/inboundfilters.ts","../../../src/integrations/trycatch.ts","../../../src/integrations/globalhandlers.ts","../../../src/integrations/linkederrors.ts","../../../src/integrations/useragent.ts","../../src/sdk.ts","../../src/index.ts"],"names":["Severity","Status","fromString","level","Debug","Info","Warning","Error","Fatal","Critical","Log","fromHttpCode","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","Object","__proto__","Array","obj","proto","prop","hasOwnProperty","message","name","prototype","constructor","DSN_REGEX","from","this","_fromString","_fromComponents","_validate","toString","withPassword","host","path","pass","port","projectId","protocol","user","str","match","exec","split","length","slice","join","pop","projectMatch","components","forEach","component","ERROR_MESSAGE","isNaN","parseInt","installedIntegrations","setupIntegrations","options","integrations","defaultIntegrations","userIntegrations","isArray","map","i","defaultIntegration","indexOf","push","userIntegration","integrationsNames","splice","getIntegrationsToSetup","integration","setupOnce","logger","log","setupIntegration","backendClass","_integrations","_processing","_backend","_options","dsn","_dsn","captureException","exception","hint","scope","eventId","event_id","_process","_getBackend","eventFromException","then","event","_captureEvent","result","captureMessage","promisedEvent","is","eventFromMessage","String","captureEvent","captureSession","session","release","_sendSession","warn","getDsn","getOptions","flush","timeout","_isClientProcessing","ready","getTransport","close","transportFlushed","enabled","_isEnabled","getIntegration","id","_oO","_updateSessionFromEvent","userAgent","crashed","errored","exceptions","values","mechanism","handled","headers","request","key","toLowerCase","update","status","Crashed","errors","Number","sendSession","resolve","ticked","interval","setInterval","clearInterval","undefined","_prepareEvent","normalizeDepth","prepared","timestamp","_applyClientOptions","_applyIntegrationsMetadata","finalScope","captureContext","clone","applyToEvent","evt","_normalizeEvent","depth","normalized","breadcrumbs","b","data","contexts","extra","trace","environment","dist","maxValueLength","value","url","sdkInfo","sdk","integrationsArray","keys","_sendEvent","sendEvent","_processEvent","finalEvent","reason","error","beforeSend","sampleRate","reject","isTransaction","type","Math","random","__sentry__","beforeSendResult","e","processedEvent","getSession","originalException","promise","_","Skipped","_transport","_setupTransport","_exception","_hint","_message","_level","supportsFetch","Headers","Request","Response","isNativeFetch","func","test","supportsReferrerPolicy","referrerPolicy","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","computeStackTrace","ex","stack","popSize","framesToPop","stacktrace","parts","opera10Regex","opera11Regex","lines","line","element","args","column","extractMessage","computeStackTraceFromStacktraceProp","popFrames","submatch","isNative","substr","columnNumber","computeStackTraceFromStackProp","failed","exceptionFromStacktrace","frames","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","filename","function","in_app","lineno","reverse","eventFromUnknownInput","syntheticException","attachStacktrace","eventFromString","domException","tags","rejection","__serialized__","eventFromPlainObject","synthetic","input","sessionToSentryRequest","api","body","JSON","stringify","sent_at","Date","toISOString","getEnvelopeEndpointWithUrlEncodedAuth","eventToSentryRequest","__sentry_samplingMethod","__sentry_sampleRate","otherTags","useEnvelope","req","getStoreEndpointWithUrlEncodedAuth","envelope","sample_rates","samplingMethod","rate","_dsnObject","getBaseApiEndpoint","getStoreEndpoint","_getIngestEndpoint","_encodedAuth","_getEnvelopeEndpoint","getStoreEndpointPath","getRequestHeaders","clientName","clientVersion","header","getReportDialogEndpoint","dialogOptions","endpoint","encodedOptions","encodeURIComponent","email","target","auth","sentry_key","sentry_version","_limit","_buffer","isReady","add","task","remove","drain","capturedSetTimeout","setTimeout","all","clearTimeout","_rateLimits","_api","_handleResponse","requestType","response","_handleRateLimit","_disabledUntil","category","_isRateLimited","now","rlHeader","raHeader","trim","parameters","headerDelay","delay","_sendRequest","sentryRequest","originalPayload","Promise","method","fetchParameters","assign","fetch","get","catch","XMLHttpRequest","onreadystatechange","readyState","getResponseHeader","open","setRequestHeader","send","transportOptions","transport","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","wrap","fn","before","__sentry_wrapped__","sentryWrapped","call","arguments","apply","wrappedArguments","arg","handleEvent","addEventProcessor","property","defineProperty","enumerable","defineProperties","__sentry_original__","getOwnPropertyDescriptor","configurable","injectReportDialog","script","document","createElement","async","src","onLoad","onload","head","appendChild","lastHref","handlers","instrumented","instrument","console","originalConsoleLevel","triggerHandlers","Function","instrumentConsole","addEventListener","domEventHandler","bind","keypressEventHandler","original","eventName","innerOriginal","instrumentDOM","requestKeys","requestValues","xhrproto","originalOpen","xhr","__sentry_xhr__","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","status_code","requestPos","endTimestamp","startTimestamp","readyStateArgs","originalSend","instrumentXHR","global","doc","sandbox","hidden","contentWindow","removeChild","err","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","handler","callback","fetchArgs","keypressTimeout","lastCapturedEvent","debounceTimer","debounce","tagName","isContentEditable","originalFunctionToString","Breadcrumbs","dom","sentry","addSentryBreadcrumb","addBreadcrumb","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","breadcrumb","parsedLoc","parsedFrom","parsedTo","relative","SDK_NAME","SDK_VERSION","showReportDialog","platform","packages","version","FunctionToString","context","DEFAULT_IGNORE_ERRORS","InboundFilters","hub","self","client","getClient","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","pattern","denyUrls","allowUrls","whitelistUrls","blacklistUrls","oO","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","originalCallback","originalRemoveEventListener","wrappedEventHandler","originalEventHandler","xmlHttpRequestProps","wrapOptions","GlobalHandlers","_onErrorHandlerInstalled","_onUnhandledRejectionHandlerInstalled","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","detail","_eventFromRejectionWithPrimitive","groups","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","UserAgent","navigator","referrer","Referer","init","SENTRY_RELEASE","autoSessionTracking","initAndBind","window","loadResolved","fcpResolved","possiblyEndSession","endSession","startSession","resolveWindowLoaded","removeEventListener","po","PerformanceObserver","entryList","getEntries","entry","startTime","disconnect","visibilityState","Infinity","min","timeStamp","once","observe","buffered","startSessionTracking","lastEventId","forceLoad","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS"],"mappings":"wxEAEYA,ECAAC,E,SDAZ,SAAYD,GAEV,gBAEA,gBAEA,oBAEA,YAEA,cAEA,gBAEA,sBAdF,CAAYA,MAAQ,KAkBpB,SAAiBA,GAOC,EAAAE,WAAhB,SAA2BC,GACzB,OAAQA,GACN,IAAK,QACH,OAAOH,EAASI,MAClB,IAAK,OACH,OAAOJ,EAASK,KAClB,IAAK,OACL,IAAK,UACH,OAAOL,EAASM,QAClB,IAAK,QACH,OAAON,EAASO,MAClB,IAAK,QACH,OAAOP,EAASQ,MAClB,IAAK,WACH,OAAOR,EAASS,SAClB,IAAK,MACL,QACE,OAAOT,EAASU,MAxBxB,CAAiBV,MAAQ,KClBzB,SAAYC,GAEV,oBAEA,oBAEA,oBAEA,yBAEA,oBAEA,kBAZF,CAAYA,MAAM,KAgBlB,SAAiBA,GAOC,EAAAU,aAAhB,SAA6BC,GAC3B,OAAIA,GAAQ,KAAOA,EAAO,IACjBX,EAAOY,QAGH,MAATD,EACKX,EAAOa,UAGZF,GAAQ,KAAOA,EAAO,IACjBX,EAAOc,QAGZH,GAAQ,IACHX,EAAOe,OAGTf,EAAOgB,SAxBlB,CAAiBhB,MAAM,K,wCClBViB,EACXC,OAAOD,iBAAmB,CAAEE,UAAW,cAAgBC,MAMzD,SAAoDC,EAAcC,GAGhE,OADAD,EAAIF,UAAYG,EACTD,GAOT,SAAyDA,EAAcC,GACrE,IAAK,IAAMC,KAAQD,EAEZD,EAAIG,eAAeD,KAEtBF,EAAIE,GAAQD,EAAMC,IAItB,OAAOF,ICvBT,kBAIE,WAA0BI,G,uBAA1B,EACE,YAAMA,IAAQ,K,OADU,EAAAA,UAGxB,EAAKC,KAAO,EAAWC,UAAUC,YAAYF,KAC7CT,EAAe,EAAM,EAAWU,W,EAEpC,OAViC,iBAUjC,EAVA,CAAiCrB,OCE3BuB,EAAY,iEAMlB,aAiBE,WAAmBC,GACG,kBAATA,EACTC,KAAKC,YAAYF,GAEjBC,KAAKE,gBAAgBH,GAGvBC,KAAKG,YA+ET,OAnES,YAAAC,SAAP,SAAgBC,QAAA,IAAAA,OAAA,GACR,WAAEC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,UAChC,OAD2C,EAAAC,SAE9B,MAFwC,EAAAC,MAE3BP,GAAgBG,EAAO,IAAIA,EAAS,IAC5D,IAAIF,GAAOG,EAAO,IAAIA,EAAS,IAAE,KAAIF,EAAUA,EAAI,IAAMA,GAAOG,GAK5D,YAAAT,YAAR,SAAoBY,GAClB,IAAMC,EAAQhB,EAAUiB,KAAKF,GAE7B,IAAKC,EACH,MAAM,IAAI,EApDM,eAuDZ,gCAACH,EAAA,KAAUC,EAAA,KAAM,OAAAJ,OAAA,IAAO,EAAP,KAAWF,EAAA,KAAM,OAAAG,OAAA,IAAO,EAAP,KACpCF,EAAO,GACPG,EAF+C,KAI7CM,EAAQN,EAAUM,MAAM,KAM9B,GALIA,EAAMC,OAAS,IACjBV,EAAOS,EAAME,MAAM,GAAI,GAAGC,KAAK,KAC/BT,EAAYM,EAAMI,OAGhBV,EAAW,CACb,IAAMW,EAAeX,EAAUI,MAAM,QACjCO,IACFX,EAAYW,EAAa,IAI7BrB,KAAKE,gBAAgB,CAAEI,KAAI,EAAEE,KAAI,EAAED,KAAI,EAAEG,UAAS,EAAED,KAAI,EAAEE,SAAUA,EAAyBC,KAAI,KAI3F,YAAAV,gBAAR,SAAwBoB,GACtBtB,KAAKW,SAAWW,EAAWX,SAC3BX,KAAKY,KAAOU,EAAWV,KACvBZ,KAAKQ,KAAOc,EAAWd,MAAQ,GAC/BR,KAAKM,KAAOgB,EAAWhB,KACvBN,KAAKS,KAAOa,EAAWb,MAAQ,GAC/BT,KAAKO,KAAOe,EAAWf,MAAQ,GAC/BP,KAAKU,UAAYY,EAAWZ,WAItB,YAAAP,UAAR,sBAOE,GANA,CAAC,WAAY,OAAQ,OAAQ,aAAaoB,SAAQ,SAAAC,GAChD,IAAK,EAAKA,GACR,MAAM,IAAI,EAAeC,gBAAkBD,EAAS,gBAInDxB,KAAKU,UAAUI,MAAM,SACxB,MAAM,IAAI,EAAeW,kCAAoCzB,KAAKU,WAGpE,GAAsB,SAAlBV,KAAKW,UAAyC,UAAlBX,KAAKW,SACnC,MAAM,IAAI,EAAec,iCAAmCzB,KAAKW,UAGnE,GAAIX,KAAKS,MAAQiB,MAAMC,SAAS3B,KAAKS,KAAM,KACzC,MAAM,IAAI,EAAegB,6BAA+BzB,KAAKS,OAGnE,EAvGA,G,4DCPamB,EAAkC,GAmEzC,SAAUC,EAAqCC,GACnD,IAAMC,EAAiC,GAKvC,OAjEI,SAAiCD,GACrC,IAAME,EAAuBF,EAAQE,qBAAmB,YAAQF,EAAQE,sBAAyB,GAC3FC,EAAmBH,EAAQC,aAC7BA,EAA8B,GAClC,GAAI1C,MAAM6C,QAAQD,GAAmB,CACnC,IAAM,EAAwBA,EAAiBE,KAAI,SAAAC,GAAK,OAAAA,EAAA,QAClD,EAAoC,GAG1CJ,EAAoBT,SAAQ,SAAAc,IAEoC,IAA5D,EAAsBC,QAAQD,EAAmB1C,QACa,IAA9D,EAAwB2C,QAAQD,EAAmB1C,QAEnDoC,EAAaQ,KAAKF,GAClB,EAAwBE,KAAKF,EAAmB1C,UAKpDsC,EAAiBV,SAAQ,SAAAiB,IACwC,IAA3D,EAAwBF,QAAQE,EAAgB7C,QAClDoC,EAAaQ,KAAKC,GAClB,EAAwBD,KAAKC,EAAgB7C,cAGZ,oBAArBsC,GAChBF,EAAeE,EAAiBD,GAChCD,EAAe1C,MAAM6C,QAAQH,GAAgBA,EAAe,CAACA,IAE7DA,EAAe,OAAH,IAAG,CAAIC,GAIrB,IAAMS,EAAoBV,EAAaI,KAAI,SAAAC,GAAK,OAAAA,EAAA,QAMhD,OAJoD,IAAhDK,EAAkBH,QADE,UAEtBP,EAAaQ,KAAI,MAAjBR,EAAY,YAASA,EAAaW,OAAOD,EAAkBH,QAFrC,SAE+D,KAGhFP,EAqBPY,CAAuBb,GAASP,SAAQ,SAAAqB,GACtCb,EAAaa,EAAYjD,MAAQiD,EAlB/B,SAA2BA,IAC0B,IAArDhB,EAAsBU,QAAQM,EAAYjD,QAG9CiD,EAAYC,UAAU,IAAyB,KAC/CjB,EAAsBW,KAAKK,EAAYjD,MACvCmD,EAAA,EAAOC,IAAI,0BAA0BH,EAAYjD,OAa/CqD,CAAiBJ,MAEZb,ECjBT,iBA0BE,WAAsBkB,EAAkCnB,GAX9C,KAAAoB,cAAkC,GAGlC,KAAAC,YAAsB,EAS9BnD,KAAKoD,SAAW,IAAIH,EAAanB,GACjC9B,KAAKqD,SAAWvB,EAEZA,EAAQwB,MACVtD,KAAKuD,KAAO,IAAI,EAAIzB,EAAQwB,MA8dlC,OAtdS,YAAAE,iBAAP,SAAwBC,EAAgBC,EAAkBC,GAA1D,WACMC,EAA8BF,GAAQA,EAAKG,SAW/C,OATA7D,KAAK8D,SACH9D,KAAK+D,cACFC,mBAAmBP,EAAWC,GAC9BO,MAAK,SAAAC,GAAS,SAAKC,cAAcD,EAAOR,EAA1B,MACdO,MAAK,SAAAG,GACJR,EAAUQ,MAITR,GAMF,YAAAS,eAAP,SAAsB3E,EAAiBvB,EAAkBuF,EAAkBC,GAA3E,WACMC,EAA8BF,GAAQA,EAAKG,SAEzCS,EAAgB,OAAAC,EAAA,GAAY7E,GAC9BM,KAAK+D,cAAcS,iBAAiBC,OAAO/E,GAAUvB,EAAOuF,GAC5D1D,KAAK+D,cAAcC,mBAAmBtE,EAASgE,GAUnD,OARA1D,KAAK8D,SACHQ,EACGL,MAAK,SAAAC,GAAS,SAAKC,cAAcD,EAAOR,EAA1B,MACdO,MAAK,SAAAG,GACJR,EAAUQ,MAITR,GAMF,YAAAc,aAAP,SAAoBR,EAAcR,EAAkBC,GAClD,IAAIC,EAA8BF,GAAQA,EAAKG,SAQ/C,OANA7D,KAAK8D,SACH9D,KAAKmE,cAAcD,EAAOR,EAAMC,GAAOM,MAAK,SAAAG,GAC1CR,EAAUQ,MAIPR,GAMF,YAAAe,eAAP,SAAsBC,GACfA,EAAQC,QAGX7E,KAAK8E,aAAaF,GAFlB9B,EAAA,EAAOiC,KAAK,iDAST,YAAAC,OAAP,WACE,OAAOhF,KAAKuD,MAMP,YAAA0B,WAAP,WACE,OAAOjF,KAAKqD,UAMP,YAAA6B,MAAP,SAAaC,GAAb,WACE,OAAOnF,KAAKoF,oBAAoBD,GAASlB,MAAK,SAAAoB,GAC5C,OAAO,EAAKtB,cACTuB,eACAC,MAAMJ,GACNlB,MAAK,SAAAuB,GAAoB,OAAAH,GAAA,SAOzB,YAAAE,MAAP,SAAaJ,GAAb,WACE,OAAOnF,KAAKkF,MAAMC,GAASlB,MAAK,SAAAG,GAE9B,OADA,EAAKa,aAAaQ,SAAU,EACrBrB,MAOJ,YAAAvC,kBAAP,WACM7B,KAAK0F,eACP1F,KAAKkD,cAAgBrB,EAAkB7B,KAAKqD,YAOzC,YAAAsC,eAAP,SAA6C/C,GAC3C,IACE,OAAQ5C,KAAKkD,cAAcN,EAAYgD,KAAa,KACpD,MAAOC,GAEP,OADA/C,EAAA,EAAOiC,KAAK,+BAA+BnC,EAAYgD,GAAE,4BAClD,OAKD,YAAAE,wBAAV,SAAkClB,EAAkBV,G,QAG9C6B,EAFAC,GAAU,EACVC,GAAU,EAERC,EAAahC,EAAMT,WAAaS,EAAMT,UAAU0C,OAEtD,GAAID,EAAY,CACdD,GAAU,E,IAEV,IAAiB,kBAAAC,GAAU,8BAAE,CAAxB,IACGE,EADK,QACUA,UACrB,GAAIA,IAAmC,IAAtBA,EAAUC,QAAmB,CAC5CL,GAAU,EACV,Q,kGAKN,IAAMpF,EAAOsD,EAAMtD,KACnB,IAAKgE,EAAQmB,UAAW,CACtB,IAAMO,EAAUpC,EAAMqC,QAAUrC,EAAMqC,QAAQD,QAAU,GACxD,IAAK,IAAME,KAAOF,EAChB,GAA0B,eAAtBE,EAAIC,cAAgC,CACtCV,EAAYO,EAAQE,GACpB,OAKN5B,EAAQ8B,OAAM,2BACRV,GAAW,CAAEW,OAAQ,IAAcC,UAAU,CACjDhG,KAAI,EACJmF,UAAS,EACTc,OAAQjC,EAAQiC,OAASC,OAAOb,GAAWD,OAKrC,YAAAlB,aAAV,SAAuBF,GACrB5E,KAAK+D,cAAcgD,YAAYnC,IAIvB,YAAAQ,oBAAV,SAA8BD,GAA9B,WACE,OAAO,IAAI,KAAY,SAAA6B,GACrB,IAAIC,EAAiB,EAGfC,EAAWC,aAAY,WACH,GAApB,EAAKhE,aACPiE,cAAcF,GACdF,GAAQ,KAERC,GAPiB,EAQb9B,GAAW8B,GAAU9B,IACvBiC,cAAcF,GACdF,GAAQ,OAVO,OAkBf,YAAAjD,YAAV,WACE,OAAO/D,KAAKoD,UAIJ,YAAAsC,WAAV,WACE,OAAqC,IAA9B1F,KAAKiF,aAAaQ,cAAmC4B,IAAdrH,KAAKuD,MAiB3C,YAAA+D,cAAV,SAAwBpD,EAAcP,EAAeD,GAArD,WACU,oBAAA6D,sBAAA,UACFC,EAAQ,2BACTtD,GAAK,CACRL,SAAUK,EAAML,WAAaH,GAAQA,EAAKG,SAAWH,EAAKG,SAAW,eACrE4D,UAAWvD,EAAMuD,WAAa,gBAGhCzH,KAAK0H,oBAAoBF,GACzBxH,KAAK2H,2BAA2BH,GAIhC,IAAII,EAAajE,EACbD,GAAQA,EAAKmE,iBACfD,EAAa,IAAME,MAAMF,GAAYlB,OAAOhD,EAAKmE,iBAInD,IAAIzD,EAAS,IAAY4C,QAAsBQ,GAS/C,OALII,IAEFxD,EAASwD,EAAWG,aAAaP,EAAU9D,IAGtCU,EAAOH,MAAK,SAAA+D,GACjB,MAA8B,kBAAnBT,GAA+BA,EAAiB,EAClD,EAAKU,gBAAgBD,EAAKT,GAE5BS,MAcD,YAAAC,gBAAV,SAA0B/D,EAAqBgE,GAC7C,IAAKhE,EACH,OAAO,KAGT,IAAMiE,EAAa,OAAH,IAAG,CAAH,mDACXjE,GACCA,EAAMkE,aAAe,CACvBA,YAAalE,EAAMkE,YAAYjG,KAAI,SAAAkG,GAAK,kCACnCA,GACCA,EAAEC,MAAQ,CACZA,KAAM,YAAUD,EAAEC,KAAMJ,UAI1BhE,EAAMtD,MAAQ,CAChBA,KAAM,YAAUsD,EAAMtD,KAAMsH,KAE1BhE,EAAMqE,UAAY,CACpBA,SAAU,YAAUrE,EAAMqE,SAAUL,KAElChE,EAAMsE,OAAS,CACjBA,MAAO,YAAUtE,EAAMsE,MAAON,KAclC,OAJIhE,EAAMqE,UAAYrE,EAAMqE,SAASE,QAEnCN,EAAWI,SAASE,MAAQvE,EAAMqE,SAASE,OAEtCN,GASC,YAAAT,oBAAV,SAA8BxD,GAC5B,IAAMpC,EAAU9B,KAAKiF,aACbyD,EAAA,EAAAA,YAAa7D,EAAA,EAAAA,QAAS8D,EAAA,EAAAA,KAAM,IAAAC,sBAAA,IAAiB,EAAjB,MAE9B,gBAAiB1E,IACrBA,EAAMwE,YAAc,gBAAiB5G,EAAU4G,EAAc,mBAGzCrB,IAAlBnD,EAAMW,cAAqCwC,IAAZxC,IACjCX,EAAMW,QAAUA,QAGCwC,IAAfnD,EAAMyE,WAA+BtB,IAATsB,IAC9BzE,EAAMyE,KAAOA,GAGXzE,EAAMxE,UACRwE,EAAMxE,QAAU,YAASwE,EAAMxE,QAASkJ,IAG1C,IAAMnF,EAAYS,EAAMT,WAAaS,EAAMT,UAAU0C,QAAUjC,EAAMT,UAAU0C,OAAO,GAClF1C,GAAaA,EAAUoF,QACzBpF,EAAUoF,MAAQ,YAASpF,EAAUoF,MAAOD,IAG9C,IAAMrC,EAAUrC,EAAMqC,QAClBA,GAAWA,EAAQuC,MACrBvC,EAAQuC,IAAM,YAASvC,EAAQuC,IAAKF,KAQ9B,YAAAjB,2BAAV,SAAqCzD,GACnC,IAAM6E,EAAU7E,EAAM8E,IAChBC,EAAoB9J,OAAO+J,KAAKlJ,KAAKkD,eACvC6F,GAAWE,EAAkBhI,OAAS,IACxC8H,EAAQhH,aAAekH,IAQjB,YAAAE,WAAV,SAAqBjF,GACnBlE,KAAK+D,cAAcqF,UAAUlF,IASrB,YAAAC,cAAV,SAAwBD,EAAcR,EAAkBC,GACtD,OAAO3D,KAAKqJ,cAAcnF,EAAOR,EAAMC,GAAOM,MAC5C,SAAAqF,GACE,OAAOA,EAAWzF,YAEpB,SAAA0F,GACEzG,EAAA,EAAO0G,MAAMD,OAmBT,YAAAF,cAAV,SAAwBnF,EAAcR,EAAkBC,GAAxD,WAEQ,oBAAE8F,EAAA,EAAAA,WAAYC,EAAA,EAAAA,WAEpB,IAAK1J,KAAK0F,aACR,OAAO,IAAYiE,OAAO,IAAI,EAAY,0CAG5C,IAAMC,EAA+B,gBAAf1F,EAAM2F,KAI5B,OAAKD,GAAuC,kBAAfF,GAA2BI,KAAKC,SAAWL,EAC/D,IAAYC,OACjB,IAAI,EACF,oFAAoFD,EAAU,MAK7F1J,KAAKsH,cAAcpD,EAAOP,EAAOD,GACrCO,MAAK,SAAAuD,GACJ,GAAiB,OAAbA,EACF,MAAM,IAAI,EAAY,0DAIxB,GAD4B9D,GAAQA,EAAK4E,OAA8D,IAArD5E,EAAK4E,KAAiC0B,YAC7DJ,IAAkBH,EAC3C,OAAOjC,EAGT,IAAMyC,EAAmBR,EAAWjC,EAAU9D,GAC9C,GAAgC,qBAArBuG,EACT,MAAM,IAAI,EAAY,8DACjB,OAAI,OAAA1F,EAAA,GAAW0F,GACZA,EAA+ChG,MACrD,SAAAC,GAAS,OAAAA,KACT,SAAAgG,GACE,MAAM,IAAI,EAAY,4BAA4BA,MAIjDD,KAERhG,MAAK,SAAAkG,GACJ,GAAuB,OAAnBA,EACF,MAAM,IAAI,EAAY,sDAGxB,IAAMvF,EAAUjB,GAASA,EAAMyG,YAAczG,EAAMyG,aAMnD,OALKR,GAAiBhF,GACpB,EAAKkB,wBAAwBlB,EAASuF,GAGxC,EAAKhB,WAAWgB,GACTA,KAERlG,KAAK,MAAM,SAAAsF,GACV,GAAIA,aAAkB,EACpB,MAAMA,EASR,MANA,EAAK/F,iBAAiB+F,EAAQ,CAC5BjB,KAAM,CACJ0B,YAAY,GAEdK,kBAAmBd,IAEf,IAAI,EACR,8HAA8HA,OAQ5H,YAAAzF,SAAV,SAAsBwG,GAAtB,WACEtK,KAAKmD,aAAe,EACpBmH,EAAQrG,MACN,SAAA4E,GAEE,OADA,EAAK1F,aAAe,EACb0F,KAET,SAAAU,GAEE,OADA,EAAKpG,aAAe,EACboG,MAIf,EA7fA,GCxDA,2BAiBA,OAbS,YAAAH,UAAP,SAAiBmB,GACf,OAAO,IAAYvD,QAAQ,CACzBuC,OAAQ,sEACR5C,OAAQ1I,EAAOuM,WAOZ,YAAAjF,MAAP,SAAagF,GACX,OAAO,IAAYvD,SAAQ,IAE/B,EAjBA,GCsDA,aAQE,WAAmBlF,GACjB9B,KAAKqD,SAAWvB,EACX9B,KAAKqD,SAASC,KACjBR,EAAA,EAAOiC,KAAK,kDAEd/E,KAAKyK,WAAazK,KAAK0K,kBAsD3B,OA/CS,YAAA1G,mBAAP,SAA0B2G,EAAiBC,GACzC,MAAM,IAAI,EAAY,yDAMjB,YAAApG,iBAAP,SAAwBqG,EAAkBC,EAAmBF,GAC3D,MAAM,IAAI,EAAY,uDAMjB,YAAAxB,UAAP,SAAiBlF,GACflE,KAAKyK,WAAWrB,UAAUlF,GAAOD,KAAK,MAAM,SAAAsF,GAC1CzG,EAAA,EAAO0G,MAAM,8BAA8BD,OAOxC,YAAAxC,YAAP,SAAmBnC,GACZ5E,KAAKyK,WAAW1D,YAKrB/G,KAAKyK,WAAW1D,YAAYnC,GAASX,KAAK,MAAM,SAAAsF,GAC9CzG,EAAA,EAAO0G,MAAM,gCAAgCD,MAL7CzG,EAAA,EAAOiC,KAAK,4EAYT,YAAAO,aAAP,WACE,OAAOtF,KAAKyK,YAMJ,YAAAC,gBAAV,WACE,OAAO,IAAI,GAEf,EAnEA,GCDM,SAAUK,IACd,KAAM,UAAW,eACf,OAAO,EAGT,IAIE,OAHA,IAAIC,QACJ,IAAIC,QAAQ,IACZ,IAAIC,UACG,EACP,MAAOhB,GACP,OAAO,GAOX,SAASiB,EAAcC,GACrB,OAAOA,GAAQ,mDAAmDC,KAAKD,EAAKhL,YA6DxE,SAAUkL,IAMd,IAAKP,IACH,OAAO,EAGT,IAIE,OAHA,IAAIE,QAAQ,IAAK,CACfM,eAAgB,YAEX,EACP,MAAOrB,GACP,OAAO,GChHX,IAGM,EAAS,6JAITsB,EAAQ,kMACRC,EAAQ,gHACRC,EAAY,gDACZC,EAAa,gCAEbC,EAAsB,8BAItB,SAAUC,EAAkBC,GAChC,IAAIC,EAAQ,KACRC,EAAU,EAEVF,IAC4B,kBAAnBA,EAAGG,YACZD,EAAUF,EAAGG,YACJL,EAAoBP,KAAKS,EAAGpM,WACrCsM,EAAU,IAId,IAKE,GADAD,EAgHJ,SAA6CD,GAC3C,IAAKA,IAAOA,EAAGI,WACb,OAAO,KAYT,IAPA,IAKIC,EALED,EAAaJ,EAAGI,WAChBE,EAAe,8DACfC,EAAe,sGACfC,EAAQJ,EAAWlL,MAAM,MACzB+K,EAAQ,GAGLQ,EAAO,EAAGA,EAAOD,EAAMrL,OAAQsL,GAAQ,EAAG,CACjD,IAAIC,EAAU,MACTL,EAAQC,EAAarL,KAAKuL,EAAMC,KACnCC,EAAU,CACR1D,IAAKqD,EAAM,GACXf,KAAMe,EAAM,GACZM,KAAM,GACNF,MAAOJ,EAAM,GACbO,OAAQ,OAEAP,EAAQE,EAAatL,KAAKuL,EAAMC,OAC1CC,EAAU,CACR1D,IAAKqD,EAAM,GACXf,KAAMe,EAAM,IAAMA,EAAM,GACxBM,KAAMN,EAAM,GAAKA,EAAM,GAAGnL,MAAM,KAAO,GACvCuL,MAAOJ,EAAM,GACbO,QAASP,EAAM,KAIfK,KACGA,EAAQpB,MAAQoB,EAAQD,OAC3BC,EAAQpB,KApLS,KAsLnBW,EAAMxJ,KAAKiK,IAIf,IAAKT,EAAM9K,OACT,OAAO,KAGT,MAAO,CACLvB,QAASiN,EAAeb,GACxBnM,KAAMmM,EAAGnM,KACToM,MAAK,GAjKGa,CAAoCd,GAE1C,OAAOe,EAAUd,EAAOC,GAE1B,MAAO9B,IAIT,IAEE,GADA6B,EAkBJ,SAAwCD,GACtC,IAAKA,IAAOA,EAAGC,MACb,OAAO,KAUT,IAPA,IAGIe,EACAX,EACAK,EALET,EAAQ,GACRO,EAAQR,EAAGC,MAAM/K,MAAM,MAMpBoB,EAAI,EAAGA,EAAIkK,EAAMrL,SAAUmB,EAAG,CACrC,GAAK+J,EAAQ,EAAOpL,KAAKuL,EAAMlK,IAAM,CACnC,IAAM2K,EAAWZ,EAAM,IAAqC,IAA/BA,EAAM,GAAG7J,QAAQ,UACrC6J,EAAM,IAAmC,IAA7BA,EAAM,GAAG7J,QAAQ,UACvBwK,EAAWnB,EAAW5K,KAAKoL,EAAM,OAE9CA,EAAM,GAAKW,EAAS,GACpBX,EAAM,GAAKW,EAAS,GACpBX,EAAM,GAAKW,EAAS,IAEtBN,EAAU,CAGR1D,IAAKqD,EAAM,IAA0C,IAApCA,EAAM,GAAG7J,QAAQ,eAAuB6J,EAAM,GAAGa,OAAO,cAAc/L,QAAUkL,EAAM,GACvGf,KAAMe,EAAM,IArFK,IAsFjBM,KAAMM,EAAW,CAACZ,EAAM,IAAM,GAC9BI,KAAMJ,EAAM,IAAMA,EAAM,GAAK,KAC7BO,OAAQP,EAAM,IAAMA,EAAM,GAAK,WAE5B,GAAKA,EAAQV,EAAM1K,KAAKuL,EAAMlK,IACnCoK,EAAU,CACR1D,IAAKqD,EAAM,GACXf,KAAMe,EAAM,IA7FK,IA8FjBM,KAAM,GACNF,MAAOJ,EAAM,GACbO,OAAQP,EAAM,IAAMA,EAAM,GAAK,UAE5B,MAAKA,EAAQX,EAAMzK,KAAKuL,EAAMlK,KAuBnC,SAtBS+J,EAAM,IAAMA,EAAM,GAAG7J,QAAQ,YAAc,IACrCwK,EAAWpB,EAAU3K,KAAKoL,EAAM,MAE7CA,EAAM,GAAKA,EAAM,IAAM,OACvBA,EAAM,GAAKW,EAAS,GACpBX,EAAM,GAAKW,EAAS,GACpBX,EAAM,GAAK,IACI,IAAN/J,GAAY+J,EAAM,SAA0B,IAApBL,EAAGmB,eAKpClB,EAAM,GAAGW,OAAUZ,EAAGmB,aAA0B,GAElDT,EAAU,CACR1D,IAAKqD,EAAM,GACXf,KAAMe,EAAM,IAnHK,IAoHjBM,KAAMN,EAAM,GAAKA,EAAM,GAAGnL,MAAM,KAAO,GACvCuL,KAAMJ,EAAM,IAAMA,EAAM,GAAK,KAC7BO,OAAQP,EAAM,IAAMA,EAAM,GAAK,OAM9BK,EAAQpB,MAAQoB,EAAQD,OAC3BC,EAAQpB,KA7HW,KAgIrBW,EAAMxJ,KAAKiK,GAGb,IAAKT,EAAM9K,OACT,OAAO,KAGT,MAAO,CACLvB,QAASiN,EAAeb,GACxBnM,KAAMmM,EAAGnM,KACToM,MAAK,GAjGGmB,CAA+BpB,GAErC,OAAOe,EAAUd,EAAOC,GAE1B,MAAO9B,IAIT,MAAO,CACLxK,QAASiN,EAAeb,GACxBnM,KAAMmM,GAAMA,EAAGnM,KACfoM,MAAO,GACPoB,QAAQ,GAiJZ,SAASN,EAAUX,EAAwBF,GACzC,IACE,kCACKE,GAAU,CACbH,MAAOG,EAAWH,MAAM7K,MAAM8K,KAEhC,MAAO9B,GACP,OAAOgC,GAUX,SAASS,EAAeb,GACtB,IAAMpM,EAAUoM,GAAMA,EAAGpM,QACzB,OAAKA,EAGDA,EAAQ8J,OAA0C,kBAA1B9J,EAAQ8J,MAAM9J,QACjCA,EAAQ8J,MAAM9J,QAEhBA,EALE,mBCvPL,SAAU0N,EAAwBlB,GACtC,IAAMmB,EAASC,EAAsBpB,EAAWH,OAE1CtI,EAAuB,CAC3BoG,KAAMqC,EAAWvM,KACjBkJ,MAAOqD,EAAWxM,SAWpB,OARI2N,GAAUA,EAAOpM,SACnBwC,EAAUyI,WAAa,CAAEmB,OAAM,SAGVhG,IAAnB5D,EAAUoG,MAA0C,KAApBpG,EAAUoF,QAC5CpF,EAAUoF,MAAQ,8BAGbpF,EAyCH,SAAU8J,EAAoBrB,GAGlC,MAAO,CACLzI,UAAW,CACT0C,OAAQ,CAJMiH,EAAwBlB,MAYtC,SAAUoB,EAAsBvB,GACpC,IAAKA,IAAUA,EAAM9K,OACnB,MAAO,GAGT,IAAIuM,EAAazB,EAEX0B,EAAqBD,EAAW,GAAGpC,MAAQ,GAC3CsC,EAAoBF,EAAWA,EAAWvM,OAAS,GAAGmK,MAAQ,GAapE,OAVsD,IAAlDqC,EAAmBnL,QAAQ,oBAAgF,IAApDmL,EAAmBnL,QAAQ,sBACpFkL,EAAaA,EAAWtM,MAAM,KAIoB,IAAhDwM,EAAkBpL,QAAQ,mBAC5BkL,EAAaA,EAAWtM,MAAM,GAAI,IAI7BsM,EACJtM,MAAM,EAnGc,IAoGpBiB,KACC,SAACwL,GAA0C,MAAC,CAC1CC,MAAwB,OAAjBD,EAAMjB,YAAkBrF,EAAYsG,EAAMjB,OACjDmB,SAAUF,EAAM7E,KAAO0E,EAAW,GAAG1E,IACrCgF,SAAUH,EAAMvC,MAAQ,IACxB2C,QAAQ,EACRC,OAAuB,OAAfL,EAAMpB,UAAgBlF,EAAYsG,EAAMpB,SAGnD0B,UC9FC,SAAUjK,EAAmBlC,EAAkB2B,EAAoBC,GACvE,IACMQ,EAAQgK,EAAsBzK,EADRC,GAAQA,EAAKyK,yBAAuB9G,EACG,CACjE+G,iBAAkBtM,EAAQsM,mBAU5B,OARA,YAAsBlK,EAAO,CAC3BmC,SAAS,EACTwD,KAAM,YAER3F,EAAM/F,MAAQH,EAASO,MACnBmF,GAAQA,EAAKG,WACfK,EAAML,SAAWH,EAAKG,UAEjB,IAAYmD,QAAQ9C,GAOvB,SAAUM,EACd1C,EACApC,EACAvB,EACAuF,QADA,IAAAvF,MAAkBH,EAASK,MAG3B,IACM6F,EAAQmK,EAAgB3O,EADFgE,GAAQA,EAAKyK,yBAAuB9G,EACL,CACzD+G,iBAAkBtM,EAAQsM,mBAM5B,OAJAlK,EAAM/F,MAAQA,EACVuF,GAAQA,EAAKG,WACfK,EAAML,SAAWH,EAAKG,UAEjB,IAAYmD,QAAQ9C,GAMvB,SAAUgK,EACdzK,EACA0K,EACArM,GAKA,IAAIoC,EAEJ,QAPA,IAAApC,MAAA,IAOI,OAAAyC,EAAA,GAAad,IAA6BA,EAAyB+F,MAMrE,OADAtF,EAAQqJ,EAAoB1B,EAD5BpI,EAFmBA,EAEI+F,QAIzB,GAAI,OAAAjF,EAAA,GAAWd,IAA0B,OAAAc,EAAA,GAAed,GAA4B,CAKlF,IAAM6K,EAAe7K,EACf,EAAO6K,EAAa3O,OAAS,OAAA4E,EAAA,GAAW+J,GAAgB,WAAa,gBACrE5O,EAAU4O,EAAa5O,QAAa,EAAI,KAAK4O,EAAa5O,QAAY,EAQ5E,OANAwE,EAAQmK,EAAgB3O,EAASyO,EAAoBrM,GACrD,YAAsBoC,EAAOxE,GACzB,SAAU4O,IACZpK,EAAMqK,KAAI,2BAAQrK,EAAMqK,MAAI,CAAE,oBAAqB,GAAGD,EAAa1P,QAG9DsF,EAET,OAAI,OAAAK,EAAA,GAAQd,GAEVS,EAAQqJ,EAAoB1B,EAAkBpI,IAG5C,OAAAc,EAAA,GAAcd,IAAc,OAAAc,EAAA,GAAQd,IAKtCS,EDvEE,SACJT,EACA0K,EACAK,GAEA,IAAMtK,EAAe,CACnBT,UAAW,CACT0C,OAAQ,CACN,CACE0D,KAAM,OAAAtF,EAAA,GAAQd,GAAaA,EAAU5D,YAAYF,KAAO6O,EAAY,qBAAuB,QAC3F3F,MAAO,cACL2F,EAAY,oBAAsB,aAAW,wBACvB,YAA+B/K,MAI7D+E,MAAO,CACLiG,eAAgB,YAAgBhL,KAIpC,GAAI0K,EAAoB,CACtB,IACM,EAASb,EADIzB,EAAkBsC,GACWpC,OAChD7H,EAAMgI,WAAa,CACjBmB,OAAM,GAIV,OAAOnJ,EC0CGwK,CADgBjL,EACsB0K,EAAoBrM,EAAQ0M,WAC1E,YAAsBtK,EAAO,CAC3ByK,WAAW,IAENzK,IAYTA,EAAQmK,EAAgB5K,EAAqB0K,EAAoBrM,GACjE,YAAsBoC,EAAO,GAAGT,OAAa4D,GAC7C,YAAsBnD,EAAO,CAC3ByK,WAAW,IAGNzK,GAMH,SAAUmK,EACdO,EACAT,EACArM,QAAA,IAAAA,MAAA,IAIA,IAAMoC,EAAe,CACnBxE,QAASkP,GAGX,GAAI9M,EAAQsM,kBAAoBD,EAAoB,CAClD,IACM,EAASb,EADIzB,EAAkBsC,GACWpC,OAChD7H,EAAMgI,WAAa,CACjBmB,OAAM,GAIV,OAAOnJ,ECnJH,SAAU2K,EAAuBjK,EAAkBkK,GAQvD,MAAO,CACLC,KARsBC,KAAKC,UAAU,CACrCC,SAAS,IAAIC,MAAOC,gBAOI,KALNJ,KAAKC,UAAU,CACjCpF,KAAM,YAIkC,KAAKmF,KAAKC,UAAUrK,GAC5DiF,KAAM,UACNf,IAAKgG,EAAIO,yCAKP,SAAUC,EAAqBpL,EAAc4K,GAEjD,IAAM,aAAE,IAAAS,wBAAyC,IAAAC,oBAAiC,mEAClFtL,EAAMqK,KAAOkB,EAEb,IAAMC,EAA6B,gBAAfxL,EAAM2F,KAEpB8F,EAAqB,CACzBZ,KAAMC,KAAKC,UAAU/K,GACrB2F,KAAM3F,EAAM2F,MAAQ,QACpBf,IAAK4G,EAAcZ,EAAIO,wCAA0CP,EAAIc,sCASvE,GAAIF,EAAa,CACf,IA6BMG,EA7BkBb,KAAKC,UAAU,CACrCpL,SAAUK,EAAML,SAChBqL,SAAS,IAAIC,MAAOC,gBA2Ba,KAzBfJ,KAAKC,UAAU,CACjCpF,KAAM3F,EAAM2F,KAIZiG,aAAc,CAAC,CAAElK,GAAImK,EAAgBC,KAAMtG,MAoBM,KAAKiG,EAAIZ,KAC5DY,EAAIZ,KAAOc,EAGb,OAAOF,ECvET,IAGA,aAIE,WAA0BrM,GAAA,KAAAA,MACxBtD,KAAKiQ,WAAa,IAAI,EAAI3M,GA6H9B,OAzHS,YAAA0B,OAAP,WACE,OAAOhF,KAAKiQ,YAIP,YAAAC,mBAAP,WACE,IAAM5M,EAAMtD,KAAKiQ,WACXtP,EAAW2C,EAAI3C,SAAc2C,EAAI3C,SAAQ,IAAM,GAC/CF,EAAO6C,EAAI7C,KAAO,IAAI6C,EAAI7C,KAAS,GACzC,OAAUE,EAAQ,KAAK2C,EAAIhD,KAAOG,GAAO6C,EAAI/C,KAAO,IAAI+C,EAAI/C,KAAS,IAAE,SAIlE,YAAA4P,iBAAP,WACE,OAAOnQ,KAAKoQ,mBAAmB,UAQ1B,YAAAR,mCAAP,WACE,OAAU5P,KAAKmQ,mBAAkB,IAAInQ,KAAKqQ,gBAQrC,YAAAhB,sCAAP,WACE,OAAUrP,KAAKsQ,uBAAsB,IAAItQ,KAAKqQ,gBAIzC,YAAAE,qBAAP,WACE,IAAMjN,EAAMtD,KAAKiQ,WACjB,OAAU3M,EAAI/C,KAAO,IAAI+C,EAAI/C,KAAS,IAAE,QAAQ+C,EAAI5C,UAAS,WAOxD,YAAA8P,kBAAP,SAAyBC,EAAoBC,GAC3C,IAAMpN,EAAMtD,KAAKiQ,WACXU,EAAS,CAAC,2BAMhB,OALAA,EAAOpO,KAAK,iBAAiBkO,EAAU,IAAIC,GAC3CC,EAAOpO,KAAK,cAAce,EAAI1C,MAC1B0C,EAAI9C,MACNmQ,EAAOpO,KAAK,iBAAiBe,EAAI9C,MAE5B,CACL,eAAgB,mBAChB,gBAAiBmQ,EAAOxP,KAAK,QAK1B,YAAAyP,wBAAP,SACEC,QAAA,IAAAA,MAAA,IAMA,IAAMvN,EAAMtD,KAAKiQ,WACXa,EAAc9Q,KAAKkQ,qBAAoB,oBAEvCa,EAAiB,GAEvB,IAAK,IAAMvK,KADXuK,EAAexO,KAAK,OAAOe,EAAIlD,YACbyQ,EAChB,GAAY,QAARrK,EAIJ,GAAY,SAARA,EAAgB,CAClB,IAAKqK,EAAcjQ,KACjB,SAEEiQ,EAAcjQ,KAAKjB,MACrBoR,EAAexO,KAAK,QAAQyO,mBAAmBH,EAAcjQ,KAAKjB,OAEhEkR,EAAcjQ,KAAKqQ,OACrBF,EAAexO,KAAK,SAASyO,mBAAmBH,EAAcjQ,KAAKqQ,aAGrEF,EAAexO,KAAQyO,mBAAmBxK,GAAI,IAAIwK,mBAAmBH,EAAcrK,KAGvF,OAAIuK,EAAe9P,OACP6P,EAAQ,IAAIC,EAAe5P,KAAK,KAGrC2P,GAID,YAAAR,qBAAR,WACE,OAAOtQ,KAAKoQ,mBAAmB,aAIzB,YAAAA,mBAAR,SAA2Bc,GAGzB,MAAO,GAFMlR,KAAKkQ,qBACNlQ,KAAKiQ,WACIvP,UAAS,IAAIwQ,EAAM,KAIlC,YAAAb,aAAR,WACE,IACMc,EAAO,CAGXC,WAJUpR,KAAKiQ,WAICrP,KAChByQ,eAjIqB,KAmIvB,OAAO,YAAUF,IAErB,EAlIA,GCFA,aAIE,WAA6BG,GAAA,KAAAA,SAFZ,KAAAC,QAAiC,GA4EpD,OArES,YAAAC,QAAP,WACE,YAAuBnK,IAAhBrH,KAAKsR,QAAwBtR,KAAKiB,SAAWjB,KAAKsR,QASpD,YAAAG,IAAP,SAAWC,GAAX,WACE,OAAK1R,KAAKwR,YAG0B,IAAhCxR,KAAKuR,QAAQjP,QAAQoP,IACvB1R,KAAKuR,QAAQhP,KAAKmP,GAEpBA,EACGzN,MAAK,WAAM,SAAK0N,OAAL,MACX1N,KAAK,MAAM,WACV,SAAK0N,OAAOD,GAAMzN,KAAK,MAAM,kBAK1ByN,GAbE,IAAY/H,OAAO,IAAI,EAAY,qDAsBvC,YAAAgI,OAAP,SAAcD,GAEZ,OADoB1R,KAAKuR,QAAQ7O,OAAO1C,KAAKuR,QAAQjP,QAAQoP,GAAO,GAAG,IAOlE,YAAAzQ,OAAP,WACE,OAAOjB,KAAKuR,QAAQtQ,QASf,YAAA2Q,MAAP,SAAazM,GAAb,WACE,OAAO,IAAI,KAAqB,SAAA6B,GAC9B,IAAM6K,EAAqBC,YAAW,WAChC3M,GAAWA,EAAU,GACvB6B,GAAQ,KAET7B,GACH,IAAY4M,IAAI,EAAKR,SAClBtN,MAAK,WACJ+N,aAAaH,GACb7K,GAAQ,MAET/C,KAAK,MAAM,WACV+C,GAAQ,UAIlB,EA9EA,GCQA,aAeE,WAA0BlF,GAAA,KAAAA,UALP,KAAAyP,QAAyC,IAAI,EAAc,IAG3D,KAAAU,YAAoC,GAGrDjS,KAAKkS,KAAO,IAAI,EAAIlS,KAAK8B,QAAQwB,KAEjCtD,KAAK8I,IAAM9I,KAAKkS,KAAKtC,qCAiGzB,OA3FS,YAAAxG,UAAP,SAAiBmB,GACf,MAAM,IAAI,EAAY,wDAMjB,YAAAhF,MAAP,SAAaJ,GACX,OAAOnF,KAAKuR,QAAQK,MAAMzM,IAMlB,YAAAgN,gBAAV,SAA0B,G,IACxBC,EAAA,EAAAA,YACAC,EAAA,EAAAA,SACA/L,EAAA,EAAAA,QACAU,EAAA,EAAAA,QACA2C,EAAA,EAAAA,OAQMhD,EAAS1I,EAAOU,aAAa0T,EAAS1L,QAK5B3G,KAAKsS,iBAAiBhM,IACzBxD,EAAA,EAAOiC,KAAK,yCAAyC/E,KAAKuS,eAAeH,IAElFzL,IAAW1I,EAAOY,QAKtB8K,EAAO0I,GAJLrL,EAAQ,CAAEL,OAAM,KAUV,YAAA4L,eAAV,SAAyBC,GACvB,OAAOxS,KAAKiS,YAAYO,IAAaxS,KAAKiS,YAAYF,KAM9C,YAAAU,eAAV,SAAyBD,GACvB,OAAOxS,KAAKuS,eAAeC,GAAY,IAAIrD,KAAKA,KAAKuD,QAM7C,YAAAJ,iBAAV,SAA2BhM,G,YACnBoM,EAAMvD,KAAKuD,MACXC,EAAWrM,EAAQ,wBACnBsM,EAAWtM,EAAQ,eAEzB,GAAIqM,EAAU,C,IAWZ,IAAoB,kBAAAA,EAASE,OAAO7R,MAAM,MAAI,8BAAE,CAA3C,IACG8R,EADQ,QACW9R,MAAM,IAAK,GAC9B+R,EAAcpR,SAASmR,EAAW,GAAI,IACtCE,EAAmD,KAAzCtR,MAAMqR,GAA6B,GAAdA,G,IACrC,IAAuB,4BAAAD,EAAW,GAAG9R,MAAM,OAAI,8BAAE,CAA5C,IAAMwR,EAAQ,QACjBxS,KAAKiS,YAAYO,GAAY,OAAS,IAAIrD,KAAKuD,EAAMM,I,oMAGzD,OAAO,EACF,QAAIJ,IACT5S,KAAKiS,YAAYF,IAAM,IAAI5C,KAAKuD,EAAM,YAAsBA,EAAKE,KAC1D,IAIb,EAnHA,GCNM,EAAS,cAGf,4B,+CAkEA,OAlEoC,iBAI3B,YAAAxJ,UAAP,SAAiBlF,GACf,OAAOlE,KAAKiT,aAAa3D,EAAqBpL,EAAOlE,KAAKkS,MAAOhO,IAM5D,YAAA6C,YAAP,SAAmBnC,GACjB,OAAO5E,KAAKiT,aAAapE,EAAuBjK,EAAS5E,KAAKkS,MAAOtN,IAO/D,YAAAqO,aAAR,SAAqBC,EAA8BC,GAAnD,WACE,GAAInT,KAAKyS,eAAeS,EAAcrJ,MACpC,OAAOuJ,QAAQzJ,OAAO,CACpBzF,MAAOiP,EACPtJ,KAAMqJ,EAAcrJ,KACpBN,OAAQ,yBAAyBvJ,KAAKuS,eAAeW,EAAcrJ,MAAK,6BACxElD,OAAQ,MAIZ,IAAM7E,EAAuB,CAC3BiN,KAAMmE,EAAcnE,KACpBsE,OAAQ,OAKR9H,eAAiBD,IAA2B,SAAW,IASzD,YAPqCjE,IAAjCrH,KAAK8B,QAAQwR,iBACfnU,OAAOoU,OAAOzR,EAAS9B,KAAK8B,QAAQwR,sBAETjM,IAAzBrH,KAAK8B,QAAQwE,UACfxE,EAAQwE,QAAUtG,KAAK8B,QAAQwE,SAG1BtG,KAAKuR,QAAQE,IAClB,IAAI,KAAsB,SAACzK,EAAS2C,GAClC,EACG6J,MAAMN,EAAcpK,IAAKhH,GACzBmC,MAAK,SAAAoO,GACJ,IAAM/L,EAAU,CACd,uBAAwB+L,EAAS/L,QAAQmN,IAAI,wBAC7C,cAAepB,EAAS/L,QAAQmN,IAAI,gBAEtC,EAAKtB,gBAAgB,CACnBC,YAAac,EAAcrJ,KAC3BwI,SAAQ,EACR/L,QAAO,EACPU,QAAO,EACP2C,OAAM,OAGT+J,MAAM/J,QAIjB,EAlEA,CAAoC,GCFpC,4B,+CAqDA,OArDkC,iBAIzB,YAAAP,UAAP,SAAiBlF,GACf,OAAOlE,KAAKiT,aAAa3D,EAAqBpL,EAAOlE,KAAKkS,MAAOhO,IAM5D,YAAA6C,YAAP,SAAmBnC,GACjB,OAAO5E,KAAKiT,aAAapE,EAAuBjK,EAAS5E,KAAKkS,MAAOtN,IAO/D,YAAAqO,aAAR,SAAqBC,EAA8BC,GAAnD,WACE,OAAInT,KAAKyS,eAAeS,EAAcrJ,MAC7BuJ,QAAQzJ,OAAO,CACpBzF,MAAOiP,EACPtJ,KAAMqJ,EAAcrJ,KACpBN,OAAQ,yBAAyBvJ,KAAKuS,eAAeW,EAAcrJ,MAAK,6BACxElD,OAAQ,MAIL3G,KAAKuR,QAAQE,IAClB,IAAI,KAAsB,SAACzK,EAAS2C,GAClC,IAAMpD,EAAU,IAAIoN,eAapB,IAAK,IAAMhD,KAXXpK,EAAQqN,mBAAqB,WAC3B,GAA2B,IAAvBrN,EAAQsN,WAAkB,CAC5B,IAAMvN,EAAU,CACd,uBAAwBC,EAAQuN,kBAAkB,wBAClD,cAAevN,EAAQuN,kBAAkB,gBAE3C,EAAK3B,gBAAgB,CAAEC,YAAac,EAAcrJ,KAAMwI,SAAU9L,EAASD,QAAO,EAAEU,QAAO,EAAE2C,OAAM,MAIvGpD,EAAQwN,KAAK,OAAQb,EAAcpK,KACd,EAAKhH,QAAQwE,QAC5B,EAAKxE,QAAQwE,QAAQ7G,eAAekR,IACtCpK,EAAQyN,iBAAiBrD,EAAQ,EAAK7O,QAAQwE,QAAQqK,IAG1DpK,EAAQ0N,KAAKf,EAAcnE,WAInC,EArDA,CAAkC,GCoClC,4B,+CAoCA,OApCoC,iBAI3B,YAAA/K,mBAAP,SAA0BP,EAAoBC,GAC5C,OAAOM,EAAmBhE,KAAKqD,SAAUI,EAAWC,IAK/C,YAAAc,iBAAP,SAAwB9E,EAAiBvB,EAAiCuF,GACxE,YADuC,IAAAvF,MAAkBH,EAASK,MAC3DmG,EAAiBxE,KAAKqD,SAAU3D,EAASvB,EAAOuF,IAM/C,YAAAgH,gBAAV,WACE,IAAK1K,KAAKqD,SAASC,IAEjB,OAAO,YAAMoH,gBAAe,WAG9B,IAAMwJ,EAAmB,OAAH,IAAG,CAAH,eACjBlU,KAAKqD,SAAS6Q,kBAAgB,CACjC5Q,IAAKtD,KAAKqD,SAASC,MAGrB,OAAItD,KAAKqD,SAAS8Q,UACT,IAAInU,KAAKqD,SAAS8Q,UAAUD,GAEjCnJ,IACK,IAAI,GAAemJ,GAErB,IAAI,GAAaA,IAE5B,EApCA,CAAoC,GCvChCE,GAAwB,EAKtB,SAAUC,KACd,OAAOD,GAAgB,EAMnB,SAAUE,KAEdF,IAAiB,EACjBtC,YAAW,WACTsC,IAAiB,KAYf,SAAUG,GACdC,EACA1S,EAGA2S,GAGA,QANA,IAAA3S,MAAA,IAMkB,oBAAP0S,EACT,OAAOA,EAGT,IAEE,GAAIA,EAAGxK,WACL,OAAOwK,EAIT,GAAIA,EAAGE,mBACL,OAAOF,EAAGE,mBAEZ,MAAOxK,GAIP,OAAOsK,EAKT,IAAMG,EAAiC,WACrC,IAAMlI,EAAOpN,MAAMO,UAAUsB,MAAM0T,KAAKC,WAExC,IACMJ,GAA4B,oBAAXA,GACnBA,EAAOK,MAAM9U,KAAM6U,WAIrB,IAAME,EAAmBtI,EAAKtK,KAAI,SAAC6S,GAAa,OAAAT,GAAKS,EAAL,MAEhD,OAAIR,EAAGS,YAMET,EAAGS,YAAYH,MAAM9U,KAAM+U,GAM7BP,EAAGM,MAAM9U,KAAM+U,GACtB,MAAOjJ,GAuBP,MAtBAwI,KAEA,aAAU,SAAC3Q,GACTA,EAAMuR,mBAAkB,SAAChR,GACvB,IAAMiG,EAAiB,OAAH,IAAG,CAAH,GAAQjG,GAY5B,OAVIpC,EAAQsE,YACV,YAAsB+D,OAAgB9C,OAAWA,GACjD,YAAsB8C,EAAgBrI,EAAQsE,YAGhD+D,EAAe3B,MAAK,2BACf2B,EAAe3B,OAAK,CACvBqM,UAAWpI,IAGNtC,KAGT,YAAiB2B,MAGbA,IAOV,IACE,IAAK,IAAMqJ,KAAYX,EACjBrV,OAAOS,UAAUH,eAAemV,KAAKJ,EAAIW,KAC3CR,EAAcQ,GAAYX,EAAGW,IAGjC,MAAOtP,IAET2O,EAAG5U,UAAY4U,EAAG5U,WAAa,GAC/B+U,EAAc/U,UAAY4U,EAAG5U,UAE7BT,OAAOiW,eAAeZ,EAAI,qBAAsB,CAC9Ca,YAAY,EACZxM,MAAO8L,IAKTxV,OAAOmW,iBAAiBX,EAAe,CACrC3K,WAAY,CACVqL,YAAY,EACZxM,OAAO,GAET0M,oBAAqB,CACnBF,YAAY,EACZxM,MAAO2L,KAKX,IACqBrV,OAAOqW,yBAAyBb,EAAe,QACnDc,cACbtW,OAAOiW,eAAeT,EAAe,OAAQ,CAC3ClB,IAAA,WACE,OAAOe,EAAG7U,QAKhB,MAAOkG,IAET,OAAO8O,EAmCH,SAAUe,GAAmB5T,GACjC,QADiC,IAAAA,MAAA,IAC5BA,EAAQ8B,QAIb,GAAK9B,EAAQwB,IAAb,CAKA,IAAMqS,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAQ,EACfH,EAAOI,IAAM,IAAI,EAAIjU,EAAQwB,KAAKsN,wBAAwB9O,GAEtDA,EAAQkU,SAEVL,EAAOM,OAASnU,EAAQkU,SAGzBJ,SAASM,MAAQN,SAAS7G,MAAMoH,YAAYR,QAb3C7S,EAAA,EAAO0G,MAAM,oDAJb1G,EAAA,EAAO0G,MAAM,mD,ICqHb4M,G,UA9SE,GAAS,cA6BTC,GAA6E,GAC7EC,GAA6D,GAGnE,SAASC,GAAW1M,GAClB,IAAIyM,GAAazM,GAMjB,OAFAyM,GAAazM,IAAQ,EAEbA,GACN,IAAK,WA4DT,WACE,KAAM,YAAa,IACjB,OAGF,CAAC,QAAS,OAAQ,OAAQ,QAAS,MAAO,UAAUtI,SAAQ,SAASpD,GAC7DA,KAAS,GAAOqY,SAItB,YAAK,GAAOA,QAASrY,GAAO,SAASsY,GACnC,OAAO,W,IAAS,sDACdC,GAAgB,UAAW,CAAEjK,KAAI,EAAEtO,MAAK,IAGpCsY,GACFE,SAAS/W,UAAUkV,MAAMF,KAAK6B,EAAsB,GAAOD,QAAS/J,UA3ExEmK,GACA,MACF,IAAK,OAiTT,WACE,KAAM,aAAc,IAClB,OAKF,GAAOhB,SAASiB,iBAAiB,QAASC,GAAgB,QAASJ,GAAgBK,KAAK,KAAM,SAAS,GACvG,GAAOnB,SAASiB,iBAAiB,WAAYG,GAAqBN,GAAgBK,KAAK,KAAM,SAAS,GAGtG,CAAC,cAAe,QAAQxV,SAAQ,SAAC2P,GAE/B,IAAM3R,EAAS,GAAe2R,IAAY,GAAeA,GAAQtR,UAG5DL,GAAUA,EAAME,gBAAmBF,EAAME,eAAe,sBAK7D,YAAKF,EAAO,oBAAoB,SAC9B0X,GAMA,OAAO,SAELC,EACA1C,EACA1S,GA4BA,OA1BI0S,GAAOA,EAA2BS,aAClB,UAAdiC,GACF,YAAK1C,EAAI,eAAe,SAAS2C,GAC/B,OAAO,SAAoBjT,GAEzB,OADA4S,GAAgB,QAASJ,GAAgBK,KAAK,KAAM,OAApDD,CAA4D5S,GACrDiT,EAAcvC,KAAK5U,KAAMkE,OAIpB,aAAdgT,GACF,YAAK1C,EAAI,eAAe,SAAS2C,GAC/B,OAAO,SAAoBjT,GAEzB,OADA8S,GAAqBN,GAAgBK,KAAK,KAAM,OAAhDC,CAAwD9S,GACjDiT,EAAcvC,KAAK5U,KAAMkE,SAKpB,UAAdgT,GACFJ,GAAgB,QAASJ,GAAgBK,KAAK,KAAM,QAAQ,EAA5DD,CAAkE9W,MAElD,aAAdkX,GACFF,GAAqBN,GAAgBK,KAAK,KAAM,OAAhDC,CAAwDhX,OAIrDiX,EAASrC,KAAK5U,KAAMkX,EAAW1C,EAAI1S,OAI9C,YAAKvC,EAAO,uBAAuB,SACjC0X,GAOA,OAAO,SAELC,EACA1C,EACA1S,GAEA,IACEmV,EAASrC,KAAK5U,KAAMkX,EAAa1C,EAAmCE,mBAAoB5S,GACxF,MAAOoI,IAGT,OAAO+M,EAASrC,KAAK5U,KAAMkX,EAAW1C,EAAI1S,WAnY5CsV,GACA,MACF,IAAK,OAkKT,WACE,KAAM,mBAAoB,IACxB,OAIF,IAAMC,EAAgC,GAChCC,EAA8B,GAC9BC,EAAW5D,eAAe/T,UAEhC,YAAK2X,EAAU,QAAQ,SAASC,GAC9B,OAAO,W,IAA4C,sDAEjD,IAAMC,EAAMzX,KACN8I,EAAM2D,EAAK,GACjBgL,EAAIC,eAAiB,CAEnBrE,OAAQ,OAAA9O,EAAA,GAASkI,EAAK,IAAMA,EAAK,GAAGkL,cAAgBlL,EAAK,GACzD3D,IAAK2D,EAAK,IAKR,OAAAlI,EAAA,GAASuE,IAAsC,SAA9B2O,EAAIC,eAAerE,QAAqBvK,EAAIhI,MAAM,gBACrE2W,EAAIG,wBAAyB,GAG/B,IAAMC,EAA4B,WAChC,GAAuB,IAAnBJ,EAAI5D,WAAkB,CACxB,IAGM4D,EAAIC,iBACND,EAAIC,eAAeI,YAAcL,EAAI9Q,QAEvC,MAAOuD,IAIT,IACE,IAAM6N,EAAaV,EAAY/U,QAAQmV,GACvC,IAAoB,IAAhBM,EAAmB,CAErBV,EAAY3U,OAAOqV,GACnB,IAAM,EAAOT,EAAc5U,OAAOqV,GAAY,GAC1CN,EAAIC,qBAA8BrQ,IAAZ,EAAK,KAC7BoQ,EAAIC,eAAe3I,KAAO,EAAK,KAGnC,MAAO7E,IAITwM,GAAgB,MAAO,CACrBjK,KAAI,EACJuL,aAAc7I,KAAKuD,MACnBuF,eAAgB9I,KAAKuD,MACrB+E,IAAG,MAgBT,MAXI,uBAAwBA,GAAyC,oBAA3BA,EAAI7D,mBAC5C,YAAK6D,EAAK,sBAAsB,SAASR,GACvC,OAAO,W,IAAS,sDAEd,OADAY,IACOZ,EAASnC,MAAM2C,EAAKS,OAI/BT,EAAIZ,iBAAiB,mBAAoBgB,GAGpCL,EAAa1C,MAAM2C,EAAKhL,OAInC,YAAK8K,EAAU,QAAQ,SAASY,GAC9B,OAAO,W,IAA4C,sDAUjD,OATAd,EAAY9U,KAAKvC,MACjBsX,EAAc/U,KAAKkK,GAEnBiK,GAAgB,MAAO,CACrBjK,KAAI,EACJwL,eAAgB9I,KAAKuD,MACrB+E,IAAKzX,OAGAmY,EAAarD,MAAM9U,KAAMyM,OAzPhC2L,GACA,MACF,IAAK,SA2ET,WACE,IZpDI,WACJ,IAAKrN,IACH,OAAO,EAGT,IAAMsN,EAAS,cAIf,GAAIlN,EAAckN,EAAO7E,OACvB,OAAO,EAKT,IAAIpP,GAAS,EACPkU,EAAMD,EAAOzC,SAEnB,GAAI0C,GAAiD,oBAAlCA,EAAIzC,cACrB,IACE,IAAM0C,EAAUD,EAAIzC,cAAc,UAClC0C,EAAQC,QAAS,EACjBF,EAAIpC,KAAKC,YAAYoC,GACjBA,EAAQE,eAAiBF,EAAQE,cAAcjF,QAEjDpP,EAAS+G,EAAcoN,EAAQE,cAAcjF,QAE/C8E,EAAIpC,KAAKwC,YAAYH,GACrB,MAAOI,GACP7V,EAAA,EAAOiC,KAAK,kFAAmF4T,GAInG,OAAOvU,EYmBFwU,GACH,OAGF,YAAK,GAAQ,SAAS,SAASC,GAC7B,OAAO,W,IAAS,sDACd,IAAMC,EAAc,CAClBrM,KAAI,EACJsM,UAAW,CACT1F,OAAQ2F,GAAevM,GACvB3D,IAAKmQ,GAAYxM,IAEnBwL,eAAgB9I,KAAKuD,OAQvB,OALAgE,GAAgB,QAAO,eAClBoC,IAIED,EAAc/D,MAAM,GAAQrI,GAAMxI,MACvC,SAACoO,GAMC,OALAqE,GAAgB,QAAO,2BAClBoC,GAAW,CACdd,aAAc7I,KAAKuD,MACnBL,SAAQ,KAEHA,KAET,SAAC7I,GASC,MARAkN,GAAgB,QAAO,2BAClBoC,GAAW,CACdd,aAAc7I,KAAKuD,MACnBlJ,MAAK,KAKDA,SAjHV0P,GACA,MACF,IAAK,WA4PT,WACE,IZ1JI,WAIJ,IAAMb,EAAS,cAGTc,EAAUd,EAAec,OACzBC,EAAsBD,GAAUA,EAAOE,KAAOF,EAAOE,IAAIC,QAEzDC,EAAgB,YAAalB,KAAYA,EAAOmB,QAAQC,aAAepB,EAAOmB,QAAQE,aAE5F,OAAQN,GAAuBG,EY8I1BI,GACH,OAGF,IAAMC,EAAgB,GAAOC,WAgB7B,SAASC,EAA2BC,GAClC,OAAO,W,IAAwB,sDAC7B,IAAMjR,EAAM2D,EAAKxL,OAAS,EAAIwL,EAAK,QAAKpF,EACxC,GAAIyB,EAAK,CAEP,IAAM/I,EAAOqW,GACP4D,EAAKvV,OAAOqE,GAElBsN,GAAW4D,EACXtD,GAAgB,UAAW,CACzB3W,KAAI,EACJia,GAAE,IAGN,OAAOD,EAAwBjF,MAAM9U,KAAMyM,IA7B/C,GAAOoN,WAAa,W,IAAoC,sDACtD,IAAMG,EAAK,GAAOC,SAASC,KAErBna,EAAOqW,GAMb,GALAA,GAAW4D,EACXtD,GAAgB,UAAW,CACzB3W,KAAI,EACJia,GAAE,IAEAJ,EACF,OAAOA,EAAc9E,MAAM9U,KAAMyM,IAuBrC,YAAK,GAAO+M,QAAS,YAAaM,GAClC,YAAK,GAAON,QAAS,eAAgBM,GAnSjCK,GACA,MACF,IAAK,QAsdPC,GAAqB,GAAOC,QAE5B,GAAOA,QAAU,SAASC,EAAUxR,EAAUyD,EAAWG,EAAalD,GASpE,OARAkN,GAAgB,QAAS,CACvBhK,OAAM,EACNlD,MAAK,EACL+C,KAAI,EACJ+N,IAAG,EACHxR,IAAG,MAGDsR,IAEKA,GAAmBtF,MAAM9U,KAAM6U,YAjetC,MACF,IAAK,qBA0eP0F,GAAkC,GAAOC,qBAEzC,GAAOA,qBAAuB,SAAStQ,GAGrC,OAFAwM,GAAgB,qBAAsBxM,IAElCqQ,IAEKA,GAAgCzF,MAAM9U,KAAM6U,YA/enD,MACF,QACE/R,EAAA,EAAOiC,KAAK,gCAAiC8E,IAS7C,SAAU4Q,GAA0BC,GACnCA,GAAmC,kBAAjBA,EAAQ7Q,MAAiD,oBAArB6Q,EAAQC,WAGnEtE,GAASqE,EAAQ7Q,MAAQwM,GAASqE,EAAQ7Q,OAAS,GAClDwM,GAASqE,EAAQ7Q,MAAsCtH,KAAKmY,EAAQC,UACrEpE,GAAWmE,EAAQ7Q,OAIrB,SAAS6M,GAAgB7M,EAA6BvB,G,QACpD,GAAKuB,GAASwM,GAASxM,G,IAIvB,IAAsB,kBAAAwM,GAASxM,IAAS,IAAE,8BAAE,CAAvC,IAAM6Q,EAAO,QAChB,IACEA,EAAQpS,GACR,MAAO4B,GACPpH,EAAA,EAAO0G,MACL,0DAA0DK,EAAI,WAAW,aACvE6Q,GACD,YAAYxQ,K,kGA4FrB,SAAS8O,GAAe4B,GACtB,YADsB,IAAAA,MAAA,IAClB,YAAa,IAAU,OAAArW,EAAA,GAAaqW,EAAU,GAAI3P,UAAY2P,EAAU,GAAGvH,OACtE5O,OAAOmW,EAAU,GAAGvH,QAAQsE,cAEjCiD,EAAU,IAAMA,EAAU,GAAGvH,OACxB5O,OAAOmW,EAAU,GAAGvH,QAAQsE,cAE9B,MAIT,SAASsB,GAAY2B,GACnB,YADmB,IAAAA,MAAA,IACS,kBAAjBA,EAAU,GACZA,EAAU,GAEf,YAAa,IAAU,OAAArW,EAAA,GAAaqW,EAAU,GAAI3P,SAC7C2P,EAAU,GAAG9R,IAEfrE,OAAOmW,EAAU,IA0O1B,IAEIC,GACAC,GAFAC,GAAwB,EAY5B,SAASjE,GAAgBnX,EAAc+a,EAAmBM,GACxD,YADwD,IAAAA,OAAA,GACjD,SAAC9W,GAIN2W,QAAkBxT,EAIbnD,GAAS4W,KAAsB5W,IAIpC4W,GAAoB5W,EAEhB6W,IACF/I,aAAa+I,IAGXC,EACFD,GAAgBjJ,YAAW,WACzB4I,EAAQ,CAAExW,MAAK,EAAEvE,KAAI,OAGvB+a,EAAQ,CAAExW,MAAK,EAAEvE,KAAI,MAW3B,SAASqX,GAAqB0D,GAI5B,OAAO,SAACxW,GACN,IAAIgN,EAEJ,IACEA,EAAShN,EAAMgN,OACf,MAAOhH,GAGP,OAGF,IAAM+Q,EAAU/J,GAAWA,EAAuB+J,QAK7CA,IAAwB,UAAZA,GAAmC,aAAZA,GAA4B/J,EAAuBgK,qBAMtFL,IACH/D,GAAgB,QAAS4D,EAAzB5D,CAAkC5S,GAEpC8N,aAAa6I,IAEbA,GAAmB/I,YAAW,WAC5B+I,QAAkBxT,IAhFS,OAqFjC,IAAI+S,GAA0C,KAuB9C,IAAIG,GAA6D,K,IC3iB7DY,G,UCyBJ,cAiBE,WAAmBrZ,GARZ,KAAAnC,KAAeyb,EAAYxV,GAShC5F,KAAKqD,SAAQ,aACXmT,SAAS,EACT6E,KAAK,EACL7H,OAAO,EACPgG,SAAS,EACT8B,QAAQ,EACR7D,KAAK,GACF3V,GA2PT,OApPS,YAAAyZ,oBAAP,SAA2BrX,GACpBlE,KAAKqD,SAASiY,QAGnB,cAAgBE,cACd,CACEhJ,SAAU,WAAyB,gBAAftO,EAAM2F,KAAyB,cAAgB,SACnEhG,SAAUK,EAAML,SAChB1F,MAAO+F,EAAM/F,MACbuB,QAAS,YAAoBwE,IAE/B,CACEA,MAAK,KAaJ,YAAArB,UAAP,sBACM7C,KAAKqD,SAASmT,SAChBiE,GAA0B,CACxBE,SAAU,W,IAAC,sDACT,EAAKc,mBAAkB,MAAvB,EAAI,YAAuBhP,KAE7B5C,KAAM,YAGN7J,KAAKqD,SAASgY,KAChBZ,GAA0B,CACxBE,SAAU,W,IAAC,sDACT,EAAKe,eAAc,MAAnB,EAAI,YAAmBjP,KAEzB5C,KAAM,QAGN7J,KAAKqD,SAASoU,KAChBgD,GAA0B,CACxBE,SAAU,W,IAAC,sDACT,EAAKgB,eAAc,MAAnB,EAAI,YAAmBlP,KAEzB5C,KAAM,QAGN7J,KAAKqD,SAASmQ,OAChBiH,GAA0B,CACxBE,SAAU,W,IAAC,sDACT,EAAKiB,iBAAgB,MAArB,EAAI,YAAqBnP,KAE3B5C,KAAM,UAGN7J,KAAKqD,SAASmW,SAChBiB,GAA0B,CACxBE,SAAU,W,IAAC,sDACT,EAAKkB,mBAAkB,MAAvB,EAAI,YAAuBpP,KAE7B5C,KAAM,aASJ,YAAA4R,mBAAR,SAA2B3C,GACzB,IAAMgD,EAAa,CACjBtJ,SAAU,UACVlK,KAAM,CACJuM,UAAWiE,EAAYrM,KACvB3J,OAAQ,WAEV3E,MAAOH,EAASE,WAAW4a,EAAY3a,OACvCuB,QAAS,YAASoZ,EAAYrM,KAAM,MAGtC,GAA0B,WAAtBqM,EAAY3a,MAAoB,CAClC,IAA4B,IAAxB2a,EAAYrM,KAAK,GAKnB,OAJAqP,EAAWpc,QAAU,sBAAqB,YAASoZ,EAAYrM,KAAKvL,MAAM,GAAI,MAAQ,kBACtF4a,EAAWxT,KAAKuM,UAAYiE,EAAYrM,KAAKvL,MAAM,GAOvD,cAAgBsa,cAAcM,EAAY,CACxClN,MAAOkK,EAAYrM,KACnBtO,MAAO2a,EAAY3a,SAQf,YAAAud,eAAR,SAAuB5C,GACrB,IAAI5H,EAGJ,IACEA,EAAS4H,EAAY5U,MAAMgN,OACvB,aAAiB4H,EAAY5U,MAAMgN,QACnC,aAAkB4H,EAAY5U,OAClC,MAAOgG,GACPgH,EAAS,YAGW,IAAlBA,EAAOjQ,QAIX,cAAgBua,cACd,CACEhJ,SAAU,MAAMsG,EAAYnZ,KAC5BD,QAASwR,GAEX,CACEhN,MAAO4U,EAAY5U,MACnBvE,KAAMmZ,EAAYnZ,QAShB,YAAAgc,eAAR,SAAuB7C,GACrB,GAAIA,EAAYd,aAAhB,CAEE,GAAIc,EAAYrB,IAAIG,uBAClB,OAGI,+BAAEvE,EAAA,EAAAA,OAAQvK,EAAA,EAAAA,IAAKgP,EAAA,EAAAA,YAAa/I,EAAA,EAAAA,KAElC,cAAgByM,cACd,CACEhJ,SAAU,MACVlK,KAAM,CACJ+K,OAAM,EACNvK,IAAG,EACHgP,YAAW,GAEbjO,KAAM,QAER,CACE4N,IAAKqB,EAAYrB,IACjB7I,MAAOG,WAYP,YAAA6M,iBAAR,SAAyB9C,GAElBA,EAAYd,eAIbc,EAAYC,UAAUjQ,IAAIhI,MAAM,eAAkD,SAAjCgY,EAAYC,UAAU1F,SAKvEyF,EAAYtP,MACd,cAAgBgS,cACd,CACEhJ,SAAU,QACVlK,KAAMwQ,EAAYC,UAClB5a,MAAOH,EAASO,MAChBsL,KAAM,QAER,CACEvB,KAAMwQ,EAAYtP,MAClBoF,MAAOkK,EAAYrM,OAIvB,cAAgB+O,cACd,CACEhJ,SAAU,QACVlK,KAAM,OAAF,IAAE,CAAF,eACCwQ,EAAYC,WAAS,CACxBjB,YAAagB,EAAYzG,SAAS1L,SAEpCkD,KAAM,QAER,CACE+E,MAAOkK,EAAYrM,KACnB4F,SAAUyG,EAAYzG,cAUtB,YAAAwJ,mBAAR,SAA2B/C,GACzB,IAAMT,EAAS,cACXtY,EAAO+Y,EAAY/Y,KACnBia,EAAKlB,EAAYkB,GACf+B,EAAY,YAAS1D,EAAO4B,SAASC,MACvC8B,EAAa,YAASjc,GACpBkc,EAAW,YAASjC,GAGrBgC,EAAWzb,OACdyb,EAAaD,GAKXA,EAAUpb,WAAasb,EAAStb,UAAYob,EAAUzb,OAAS2b,EAAS3b,OAC1E0Z,EAAKiC,EAASC,UAEZH,EAAUpb,WAAaqb,EAAWrb,UAAYob,EAAUzb,OAAS0b,EAAW1b,OAC9EP,EAAOic,EAAWE,UAGpB,cAAgBV,cAAc,CAC5BhJ,SAAU,aACVlK,KAAM,CACJvI,KAAI,EACJia,GAAE,MA5QM,EAAApU,GAAa,cAgR7B,EApRA,GC3BauW,GAAW,4BACXC,GAAc,SCc3B,eAME,WAAmBta,G,YAAA,IAAAA,MAAA,IACjB,YAAM,GAAgBA,IAAQ,KAyDlC,OAhEmC,iBAe1B,YAAAua,iBAAP,SAAwBva,QAAA,IAAAA,MAAA,IAEL,cAA0B8T,WAKtC5V,KAAK0F,aAKVgQ,GAAmB,OAAD,IAAC,CAAD,eACb5T,GAAO,CACVwB,IAAKxB,EAAQwB,KAAOtD,KAAKgF,YANzBlC,EAAA,EAAO0G,MAAM,iEAaP,YAAAlC,cAAV,SAAwBpD,EAAcP,EAAeD,GAenD,OAdAQ,EAAMoY,SAAWpY,EAAMoY,UAAY,aACnCpY,EAAM8E,IAAG,2BACJ9E,EAAM8E,KAAG,CACZrJ,KAAMwc,GACNI,SAAU,OAAF,IAAE,CACHrY,EAAM8E,KAAO9E,EAAM8E,IAAIuT,UAAa,GAAG,CAC5C,CACE5c,KAAM,sBACN6c,QAASJ,MAGbI,QAASJ,KAGJ,YAAM9U,cAAa,UAACpD,EAAOP,EAAOD,IAMjC,YAAAyF,WAAV,SAAqBjF,GACnB,IAAMtB,EAAc5C,KAAK2F,eAAe,IACpC/C,GACFA,EAAY2Y,oBAAoBrX,GAElC,YAAMiF,WAAU,UAACjF,IAErB,EAhEA,CAAmC,GHVnC,2BASS,KAAAvE,KAAe8c,EAAiB7W,GAezC,OAVS,YAAA/C,UAAP,WAEEsY,GAA2BxE,SAAS/W,UAAUQ,SAG9CuW,SAAS/W,UAAUQ,SAAW,W,IAAgC,sDAC5D,IAAMsc,EAAU1c,KAAKuV,qBAAuBvV,KAC5C,OAAOmb,GAAyBrG,MAAM4H,EAASjQ,KAjBrC,EAAA7G,GAAa,mBAoB7B,EAxBA,GICM+W,GAAwB,CAAC,oBAAqB,iDAgBpD,cAWE,WAAoCtZ,QAAA,IAAAA,MAAA,SAAAA,WAF7B,KAAA1D,KAAeid,EAAehX,GA4KvC,OArKS,YAAA/C,UAAP,WACE,aAAwB,SAACqB,GACvB,IAAM2Y,EAAM,cACZ,IAAKA,EACH,OAAO3Y,EAET,IAAM4Y,EAAOD,EAAIlX,eAAeiX,GAChC,GAAIE,EAAM,CACR,IAAMC,EAASF,EAAIG,YACbC,EAAgBF,EAASA,EAAO9X,aAAe,GAC/CnD,EAAUgb,EAAKI,cAAcD,GACnC,GAAIH,EAAKK,iBAAiBjZ,EAAOpC,GAC/B,OAAO,KAGX,OAAOoC,MAKH,YAAAiZ,iBAAR,SAAyBjZ,EAAcpC,GACrC,OAAI9B,KAAKod,eAAelZ,EAAOpC,IAC7BgB,EAAA,EAAOiC,KAAK,6DAA6D,YAAoBb,KACtF,GAELlE,KAAKqd,gBAAgBnZ,EAAOpC,IAC9BgB,EAAA,EAAOiC,KACL,wEAA0E,YAAoBb,KAEzF,GAELlE,KAAKsd,aAAapZ,EAAOpC,IAC3BgB,EAAA,EAAOiC,KACL,oEAAsE,YACpEb,GACD,WAAWlE,KAAKud,mBAAmBrZ,KAE/B,IAEJlE,KAAKwd,cAActZ,EAAOpC,KAC7BgB,EAAA,EAAOiC,KACL,yEAA2E,YACzEb,GACD,WAAWlE,KAAKud,mBAAmBrZ,KAE/B,IAMH,YAAAkZ,eAAR,SAAuBlZ,EAAcpC,GACnC,IAAKA,EAAQ2b,eACX,OAAO,EAGT,IACE,OACGvZ,GACCA,EAAMT,WACNS,EAAMT,UAAU0C,QAChBjC,EAAMT,UAAU0C,OAAO,IACY,gBAAnCjC,EAAMT,UAAU0C,OAAO,GAAG0D,OAC5B,EAEF,MAAOhE,GACP,OAAO,IAKH,YAAAwX,gBAAR,SAAwBnZ,EAAcpC,GACpC,SAAKA,EAAQ4b,eAAiB5b,EAAQ4b,aAAazc,SAI5CjB,KAAK2d,0BAA0BzZ,GAAO0Z,MAAK,SAAAle,GAEhD,OAACoC,EAAQ4b,aAAwCE,MAAK,SAAAC,GAAW,mBAAkBne,EAAlB,UAK7D,YAAA4d,aAAR,SAAqBpZ,EAAcpC,GAEjC,IAAKA,EAAQgc,WAAahc,EAAQgc,SAAS7c,OACzC,OAAO,EAET,IAAM6H,EAAM9I,KAAKud,mBAAmBrZ,GACpC,QAAQ4E,GAAchH,EAAQgc,SAASF,MAAK,SAAAC,GAAW,mBAAkB/U,EAAlB,OAIjD,YAAA0U,cAAR,SAAsBtZ,EAAcpC,GAElC,IAAKA,EAAQic,YAAcjc,EAAQic,UAAU9c,OAC3C,OAAO,EAET,IAAM6H,EAAM9I,KAAKud,mBAAmBrZ,GACpC,OAAQ4E,GAAahH,EAAQic,UAAUH,MAAK,SAAAC,GAAW,mBAAkB/U,EAAlB,OAIjD,YAAAoU,cAAR,SAAsBD,GACpB,YADoB,IAAAA,MAAA,IACb,CACLc,UAAW,OAAF,IAAE,CAEL/d,KAAKqD,SAAS2a,eAAiB,GAC/Bhe,KAAKqD,SAAS0a,WAAa,GAE3Bd,EAAce,eAAiB,GAC/Bf,EAAcc,WAAa,IAEjCD,SAAU,OAAF,IAAE,CAEJ9d,KAAKqD,SAAS4a,eAAiB,GAC/Bje,KAAKqD,SAASya,UAAY,GAE1Bb,EAAcgB,eAAiB,GAC/BhB,EAAca,UAAY,IAEhCJ,aAAc,OAAF,IAAE,CACR1d,KAAKqD,SAASqa,cAAgB,GAC9BT,EAAcS,cAAgB,GAC/Bf,IAELc,eAAwD,qBAAjCzd,KAAKqD,SAASoa,gBAAiCzd,KAAKqD,SAASoa,iBAKhF,YAAAE,0BAAR,SAAkCzZ,GAChC,GAAIA,EAAMxE,QACR,MAAO,CAACwE,EAAMxE,SAEhB,GAAIwE,EAAMT,UACR,IACQ,oDAAE,IAAAoG,YAAA,IAAO,EAAP,KAAW,IAAAhB,aAAA,IAAQ,EAAR,KACnB,MAAO,CAAC,GAAGA,EAAYgB,EAAI,KAAKhB,GAChC,MAAOqV,GAEP,OADApb,EAAA,EAAO0G,MAAM,oCAAoC,YAAoBtF,IAC9D,GAGX,MAAO,IAID,YAAAqZ,mBAAR,SAA2BrZ,GACzB,IACE,GAAIA,EAAMgI,WAAY,CACpB,IAAM,EAAShI,EAAMgI,WAAWmB,OAChC,OAAQ,GAAU,EAAO,EAAOpM,OAAS,GAAG4M,UAAa,KAE3D,GAAI3J,EAAMT,UAAW,CACnB,IAAM,EACJS,EAAMT,UAAU0C,QAAUjC,EAAMT,UAAU0C,OAAO,GAAG+F,YAAchI,EAAMT,UAAU0C,OAAO,GAAG+F,WAAWmB,OACzG,OAAQ,GAAU,EAAO,EAAOpM,OAAS,GAAG4M,UAAa,KAE3D,OAAO,KACP,MAAOqQ,GAEP,OADApb,EAAA,EAAO0G,MAAM,gCAAgC,YAAoBtF,IAC1D,OA9KG,EAAA0B,GAAa,iBAiL7B,EArLA,GCjBA,IAAMuY,GAAuB,CAC3B,cACA,SACA,OACA,mBACA,iBACA,oBACA,kBACA,cACA,aACA,qBACA,cACA,aACA,iBACA,eACA,kBACA,cACA,cACA,eACA,qBACA,SACA,YACA,eACA,gBACA,YACA,kBACA,SACA,iBACA,4BACA,wBAeF,cAiBE,WAAmBrc,GARZ,KAAAnC,KAAeye,EAASxY,GAS7B5F,KAAKqD,SAAQ,aACXsQ,gBAAgB,EAChB0K,aAAa,EACbC,uBAAuB,EACvBnX,aAAa,EACb2K,YAAY,GACThQ,GAkNT,OA1MS,YAAAe,UAAP,WACE,IAAMwV,EAAS,eAEXrY,KAAKqD,SAASyO,YAChB,YAAKuG,EAAQ,aAAcrY,KAAKue,kBAAkBxH,KAAK/W,OAGrDA,KAAKqD,SAAS8D,aAChB,YAAKkR,EAAQ,cAAerY,KAAKue,kBAAkBxH,KAAK/W,OAGtDA,KAAKqD,SAASib,uBAChB,YAAKjG,EAAQ,wBAAyBrY,KAAKwe,SAASzH,KAAK/W,OAGvDA,KAAKqD,SAASsQ,gBAAkB,mBAAoB0E,GACtD,YAAK1E,eAAe/T,UAAW,OAAQI,KAAKye,SAAS1H,KAAK/W,OAGxDA,KAAKqD,SAASgb,eACIhf,MAAM6C,QAAQlC,KAAKqD,SAASgb,aAAere,KAAKqD,SAASgb,YAAcF,IAC/E5c,QAAQvB,KAAK0e,iBAAiB3H,KAAK/W,QAK3C,YAAAue,kBAAR,SAA0BtH,GAExB,OAAO,W,IAAoB,sDACzB,IAAM0H,EAAmBlS,EAAK,GAQ9B,OAPAA,EAAK,GAAK8H,GAAKoK,EAAkB,CAC/BvY,UAAW,CACTkC,KAAM,CAAEwF,SAAU,aAAgBmJ,IAClC5Q,SAAS,EACTwD,KAAM,gBAGHoN,EAASnC,MAAM9U,KAAMyM,KAMxB,YAAA+R,SAAR,SAAiBvH,GAEf,OAAO,SAAoB0D,GAEzB,OAAO1D,EAASrC,KACd5U,KACAuU,GAAKoG,EAAU,CACbvU,UAAW,CACTkC,KAAM,CACJwF,SAAU,wBACV4M,QAAS,aAAgBzD,IAE3B5Q,SAAS,EACTwD,KAAM,mBAQR,YAAA6U,iBAAR,SAAyBxN,GAEvB,IAAMmH,EAAS,cAET9Y,EAAQ8Y,EAAOnH,IAAWmH,EAAOnH,GAAQtR,UAG1CL,GAAUA,EAAME,gBAAmBF,EAAME,eAAe,sBAI7D,YAAKF,EAAO,oBAAoB,SAC9B0X,GAEA,OAAO,SAGLC,EACA1C,EACA1S,GAEA,IACgC,oBAAnB0S,EAAGS,cACZT,EAAGS,YAAcV,GAAKC,EAAGS,YAAY8B,KAAKvC,GAAK,CAC7CpO,UAAW,CACTkC,KAAM,CACJwF,SAAU,cACV4M,QAAS,aAAgBlG,GACzBtD,OAAM,GAER7K,SAAS,EACTwD,KAAM,iBAIZ,MAAO8O,IAIT,OAAO1B,EAASrC,KACd5U,KACAkX,EAEA3C,GAAMC,EAA+B,CACnCpO,UAAW,CACTkC,KAAM,CACJwF,SAAU,mBACV4M,QAAS,aAAgBlG,GACzBtD,OAAM,GAER7K,SAAS,EACTwD,KAAM,gBAGV/H,OAKN,YAAKvC,EAAO,uBAAuB,SACjCqf,GAGA,OAAO,SAGL1H,EACA1C,EACA1S,G,MAmBM+c,EAAuBrK,EAC7B,IACE,IAAMsK,EAA0C,QAAtB,EAAGD,SAAmB,eAAEnK,mBAC9CoK,GACFF,EAA4BhK,KAAK5U,KAAMkX,EAAW4H,EAAsBhd,GAE1E,MAAOoI,IAGT,OAAO0U,EAA4BhK,KAAK5U,KAAMkX,EAAW2H,EAAqB/c,SAM5E,YAAA2c,SAAR,SAAiBtG,GAEf,OAAO,W,IAA+B,sDAEpC,IAAMV,EAAMzX,KACN+e,EAA4C,CAAC,SAAU,UAAW,aAAc,sBA4BtF,OA1BAA,EAAoBxd,SAAQ,SAAA/B,GACtBA,KAAQiY,GAA4B,oBAAdA,EAAIjY,IAE5B,YAAKiY,EAAKjY,GAAM,SAASyX,GACvB,IAAM+H,EAAc,CAClB5Y,UAAW,CACTkC,KAAM,CACJwF,SAAUtO,EACVkb,QAAS,aAAgBzD,IAE3B5Q,SAAS,EACTwD,KAAM,eAUV,OALIoN,EAAS1B,sBACXyJ,EAAY5Y,UAAUkC,KAAKoS,QAAU,aAAgBzD,EAAS1B,sBAIzDhB,GAAK0C,EAAU+H,SAKrB7G,EAAarD,MAAM9U,KAAMyM,KAnOtB,EAAA7G,GAAa,WAsO7B,EA1OA,GC1BA,cAqBE,WAAmB9D,GAZZ,KAAAnC,KAAesf,EAAerZ,GAM7B,KAAAsZ,0BAAoC,EAGpC,KAAAC,uCAAiD,EAIvDnf,KAAKqD,SAAQ,aACXgX,SAAS,EACTG,sBAAsB,GACnB1Y,GAiNT,OA3MS,YAAAe,UAAP,WACEtE,MAAM6gB,gBAAkB,GAEpBpf,KAAKqD,SAASgX,UAChBvX,EAAA,EAAOC,IAAI,oCACX/C,KAAKqf,gCAGHrf,KAAKqD,SAASmX,uBAChB1X,EAAA,EAAOC,IAAI,iDACX/C,KAAKsf,8CAKD,YAAAD,6BAAR,sBACMrf,KAAKkf,2BAITzE,GAA0B,CAExBE,SAAU,SAACrS,GACT,IAAMkB,EAAQlB,EAAKkB,MACb+V,EAAa,cACbC,EAAiBD,EAAW5Z,eAAesZ,GAC3CQ,EAAsBjW,IAA0C,IAAjCA,EAAMoO,uBAE3C,GAAK4H,IAAkBnL,OAAyBoL,EAAhD,CAIA,IAAM1C,EAASwC,EAAWvC,YACpB9Y,EAAQ,OAAAK,EAAA,GAAYiF,GACtB,EAAKkW,4BAA4BpX,EAAKgS,IAAKhS,EAAKQ,IAAKR,EAAKiE,KAAMjE,EAAKoE,QACrE,EAAKiT,8BACHzR,EAAsB1E,OAAOnC,EAAW,CACtC+G,iBAAkB2O,GAAUA,EAAO9X,aAAamJ,iBAChDI,WAAW,IAEblG,EAAKQ,IACLR,EAAKiE,KACLjE,EAAKoE,QAGX,YAAsBxI,EAAO,CAC3BmC,SAAS,EACTwD,KAAM,YAGR0V,EAAW7a,aAAaR,EAAO,CAC7BmG,kBAAmBb,MAGvBK,KAAM,UAGR7J,KAAKkf,0BAA2B,IAI1B,YAAAI,0CAAR,sBACMtf,KAAKmf,wCAIT1E,GAA0B,CAExBE,SAAU,SAACzQ,GACT,IAAIV,EAAQU,EAGZ,IAGM,WAAYA,EACdV,EAAQU,EAAEX,OAOH,WAAYW,GAAK,WAAYA,EAAE0V,SACtCpW,EAAQU,EAAE0V,OAAOrW,QAEnB,MAAO1D,IAIT,IAAM0Z,EAAa,cACbC,EAAiBD,EAAW5Z,eAAesZ,GAC3CQ,EAAsBjW,IAA0C,IAAjCA,EAAMoO,uBAE3C,IAAK4H,GAAkBnL,MAAyBoL,EAC9C,OAAO,EAGT,IAAM1C,EAASwC,EAAWvC,YACpB9Y,EAAQ,OAAAK,EAAA,GAAYiF,GACtB,EAAKqW,iCAAiCrW,GACtC0E,EAAsB1E,OAAOnC,EAAW,CACtC+G,iBAAkB2O,GAAUA,EAAO9X,aAAamJ,iBAChDI,WAAW,IAGjBtK,EAAM/F,MAAQH,EAASO,MAEvB,YAAsB2F,EAAO,CAC3BmC,SAAS,EACTwD,KAAM,yBAGR0V,EAAW7a,aAAaR,EAAO,CAC7BmG,kBAAmBb,KAKvBK,KAAM,uBAGR7J,KAAKmf,uCAAwC,IAOvC,YAAAO,4BAAR,SAAoCpF,EAAUxR,EAAUyD,EAAWG,GACjE,IAII/M,EADAD,EAAU,OAAA6E,EAAA,GAAa+V,GAAOA,EAAI5a,QAAU4a,EAGhD,GAAI,OAAA/V,EAAA,GAAS7E,GAAU,CACrB,IAAMogB,EAASpgB,EAAQoB,MAPF,4GAQjBgf,IACFngB,EAAOmgB,EAAO,GACdpgB,EAAUogB,EAAO,IAIrB,IAAM5b,EAAQ,CACZT,UAAW,CACT0C,OAAQ,CACN,CACE0D,KAAMlK,GAAQ,QACdkJ,MAAOnJ,MAMf,OAAOM,KAAK2f,8BAA8Bzb,EAAO4E,EAAKyD,EAAMG,IAStD,YAAAmT,iCAAR,SAAyCtW,GACvC,MAAO,CACL9F,UAAW,CACT0C,OAAQ,CACN,CACE0D,KAAM,qBAENhB,MAAO,oDAAoDpE,OAAO8E,QASpE,YAAAoW,8BAAR,SAAsCzb,EAAc4E,EAAUyD,EAAWG,GACvExI,EAAMT,UAAYS,EAAMT,WAAa,GACrCS,EAAMT,UAAU0C,OAASjC,EAAMT,UAAU0C,QAAU,GACnDjC,EAAMT,UAAU0C,OAAO,GAAKjC,EAAMT,UAAU0C,OAAO,IAAM,GACzDjC,EAAMT,UAAU0C,OAAO,GAAG+F,WAAahI,EAAMT,UAAU0C,OAAO,GAAG+F,YAAc,GAC/EhI,EAAMT,UAAU0C,OAAO,GAAG+F,WAAWmB,OAASnJ,EAAMT,UAAU0C,OAAO,GAAG+F,WAAWmB,QAAU,GAE7F,IAAMO,EAAQlM,MAAMC,SAAS+K,EAAQ,UAAOrF,EAAYqF,EAClDsB,EAAStM,MAAMC,SAAS4K,EAAM,UAAOlF,EAAYkF,EACjDsB,EAAW,OAAAtJ,EAAA,GAASuE,IAAQA,EAAI7H,OAAS,EAAI6H,EAAM,cAYzD,OAV2D,IAAvD5E,EAAMT,UAAU0C,OAAO,GAAG+F,WAAWmB,OAAOpM,QAC9CiD,EAAMT,UAAU0C,OAAO,GAAG+F,WAAWmB,OAAO9K,KAAK,CAC/CqL,MAAK,EACLC,SAAQ,EACRC,SAAU,IACVC,QAAQ,EACRC,OAAM,IAIH9J,GApOK,EAAA0B,GAAa,iBAsO7B,EA1OA,GCZA,cAwBE,WAAmB9D,QAAA,IAAAA,MAAA,IAfH,KAAAnC,KAAeogB,EAAana,GAgB1C5F,KAAKggB,KAAOle,EAAQ0E,KA7BJ,QA8BhBxG,KAAKsR,OAASxP,EAAQme,OA7BJ,EAoEtB,OAjCS,YAAApd,UAAP,WACE,aAAwB,SAACqB,EAAcR,GACrC,IAAMoZ,EAAO,cAAgBnX,eAAeoa,GAC5C,OAAIjD,EACKA,EAAKoD,SAAShc,EAAOR,GAEvBQ,MAOH,YAAAgc,SAAR,SAAiBhc,EAAcR,GAC7B,IAAKQ,EAAMT,YAAcS,EAAMT,UAAU0C,SAAWzC,IAAS,OAAAa,EAAA,GAAab,EAAK2G,kBAAmB9L,OAChG,OAAO2F,EAET,IAAMic,EAAengB,KAAKogB,eAAe1c,EAAK2G,kBAAoCrK,KAAKggB,MAEvF,OADA9b,EAAMT,UAAU0C,OAAM,YAAOga,EAAiBjc,EAAMT,UAAU0C,QACvDjC,GAMD,YAAAkc,eAAR,SAAuB5W,EAAsBhD,EAAauF,GACxD,QADwD,IAAAA,MAAA,KACnD,OAAAxH,EAAA,GAAaiF,EAAMhD,GAAMjI,QAAUwN,EAAM9K,OAAS,GAAKjB,KAAKsR,OAC/D,OAAOvF,EAET,IACMtI,EAAY2J,EADCvB,EAAkBrC,EAAMhD,KAE3C,OAAOxG,KAAKogB,eAAe5W,EAAMhD,GAAMA,EAAG,aAAG/C,GAAcsI,KA3D/C,EAAAnG,GAAa,eA6D7B,EAjEA,GCPM,GAAS,cAGf,2BASS,KAAAjG,KAAe0gB,EAAUza,GA8BlC,OAzBS,YAAA/C,UAAP,WACE,aAAwB,SAACqB,G,UACvB,GAAI,cAAgByB,eAAe0a,GAAY,CAE7C,IAAK,GAAOC,YAAc,GAAOrG,WAAa,GAAOrE,SACnD,OAAO1R,EAIT,IAAM4E,GAAmB,QAAb,EAAA5E,EAAMqC,eAAO,eAAEuC,OAAsB,QAAnB,EAAI,GAAOmR,gBAAQ,eAAEC,MAC3CqG,GAAA,iBAAAA,SACAxa,GAAA,kBAAAA,UAEFO,EAAU,OAAH,IAAG,CAAH,2BACK,QADL,EACRpC,EAAMqC,eAAO,eAAED,SACdia,GAAY,CAAEC,QAASD,IACvBxa,GAAa,CAAE,aAAcA,IAE7BQ,EAAU,OAAH,IAAG,CAAH,eAASuC,GAAO,CAAEA,IAAG,IAAG,CAAExC,QAAO,IAE9C,kCAAYpC,GAAK,CAAEqC,QAAO,IAE5B,OAAOrC,MAhCG,EAAA0B,GAAa,YAmC7B,EAvCA,GCCa,GAAsB,CACjC,IAAI,EAAiBgX,eACrB,IAAI,EAAiBH,iBACrB,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,IA4DA,SAAUgE,GAAK3e,GAInB,QAJmB,IAAAA,MAAA,SACiBuF,IAAhCvF,EAAQE,sBACVF,EAAQE,oBAAsB,SAERqF,IAApBvF,EAAQ+C,QAAuB,CACjC,IAAM,EAAS,cAEX,EAAO6b,gBAAkB,EAAOA,eAAe9a,KACjD9D,EAAQ+C,QAAU,EAAO6b,eAAe9a,SAGRyB,IAAhCvF,EAAQ6e,sBACV7e,EAAQ6e,qBAAsB,GAzE5B,SAA2D,EAAgC,IACzE,IAAlB,EAAQ,OACV,IAAO,SAET,IAAM,EAAM,cACN,EAAS,IAAI,EAAY,GAC/B,EAAI,WAAW,GAsEfC,CAAY,GAAe9e,GAEvBA,EAAQ6e,qBAwFd,WACE,IAAME,EAAS,cACThE,EAAM,cAMRiE,EAAuC,aAAxBlL,SAAS/B,WACxBkN,GAAc,EACZC,EAAqB,WACrBD,GAAeD,GACjBjE,EAAIoE,cASRpE,EAAIqE,eAECJ,GAGHD,EAAOhK,iBAAiB,QAXE,SAAtBsK,IACJL,GAAe,EACfE,IACAH,EAAOO,oBAAoB,OAAQD,MAWrC,IACE,IAAME,EAAK,IAAIC,qBAAoB,SAACC,EAAWF,GAC7CE,EAAUC,aAAajgB,SAAQ,SAAAkgB,GACV,2BAAfA,EAAM9hB,MAAqC8hB,EAAMC,UAAY,IAC/DL,EAAGM,aACHZ,GAAc,EACdC,WAOF,EAA+C,WAA7BpL,SAASgM,gBAA+B,EAAIC,IAClEjM,SAASiB,iBACP,oBACA,SAAA3S,GACE,EAAkB4F,KAAKgY,IAAI,EAAiB5d,EAAM6d,aAEpD,CAAEC,MAAM,IAGVX,EAAGY,QAAQ,CACTpY,KAAM,QACNqY,UAAU,IAEZ,MAAOhY,GACP6W,GAAc,EACdC,KAhJAmB,GASE,SAAU9F,GAAiBva,QAAA,IAAAA,MAAA,IAC1BA,EAAQ8B,UACX9B,EAAQ8B,QAAU,cAAgBwe,eAEpC,IAAMrF,EAAS,cAAgBC,YAC3BD,GACFA,EAAOV,iBAAiBva,GAStB,SAAUsgB,KACd,OAAO,cAAgBA,cAOnB,SAAUC,MAQV,SAAUrM,GAAO2E,GACrBA,IASI,SAAUzV,GAAMC,GACpB,IAAM4X,EAAS,cAAgBC,YAC/B,OAAID,EACKA,EAAO7X,MAAMC,GAEf,IAAYwE,QAAO,GAStB,SAAU,GAAMxE,GACpB,IAAM4X,EAAS,cAAgBC,YAC/B,OAAID,EACKA,EAAOxX,MAAMJ,GAEf,IAAYwE,QAAO,GAWtB,SAAU,GAAK6K,GACnB,OAAO,GAAaA,EAAb,GCtKT,IAAI8N,GAAqB,GAGnBC,GAAU,cACZA,GAAQC,QAAUD,GAAQC,OAAOC,eACnCH,GAAqBC,GAAQC,OAAOC,cAGtC,IAAMC,GAAe,OAAH,IAAG,CAAH,2BACbJ,IACA,GACA","file":"static/js/3.2bd480ea.chunk.js","sourcesContent":["/** JSDoc */\n// eslint-disable-next-line import/export\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\n// eslint-disable-next-line import/export\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  SessionStatus,\n  Severity,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of call being processed */\n  protected _processing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!session.release) {\n      logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(ready => {\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    let userAgent;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    const user = event.user;\n    if (!session.userAgent) {\n      const headers = event.request ? event.request.headers : {};\n      for (const key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n\n    session.update({\n      ...(crashed && { status: SessionStatus.Crashed }),\n      user,\n      userAgent,\n      errors: session.errors + Number(errored || crashed),\n    });\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const sdkInfo = event.sdk;\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        if (typeof beforeSendResult === 'undefined') {\n          throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n        } else if (isThenable(beforeSendResult)) {\n          return (beforeSendResult as PromiseLike<Event | null>).then(\n            event => event,\n            e => {\n              throw new SentryError(`beforeSend rejected with ${e}`);\n            },\n          );\n        }\n        return beforeSendResult;\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._processing += 1;\n    promise.then(\n      value => {\n        this._processing -= 1;\n        return value;\n      },\n      reason => {\n        this._processing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    this._transport.sendSession(session).then(null, reason => {\n      logger.error(`Error while sending session: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex: any): StackTrace {\n  let stack = null;\n  let popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  rejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event, EventHint, Options, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromException(options: Options, exception: unknown, hint?: EventHint): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  addExceptionMechanism(event, {\n    handled: true,\n    type: 'generic',\n  });\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  options: Options,\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    // eslint-disable-next-line no-param-reassign\n    exception = errorEvent.error;\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name, code, and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    const domException = exception as DOMException;\n    const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n    const message = domException.message ? `${name}: ${domException.message}` : name;\n\n    event = eventFromString(message, syntheticException, options);\n    addExceptionTypeValue(event, message);\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { Event, SentryRequest, Session } from '@sentry/types';\n\nimport { API } from './api';\n\n/** Creates a SentryRequest from an event. */\nexport function sessionToSentryRequest(session: Session, api: API): SentryRequest {\n  const envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString(),\n  });\n  const itemHeaders = JSON.stringify({\n    type: 'session',\n  });\n\n  return {\n    body: `${envelopeHeaders}\\n${itemHeaders}\\n${JSON.stringify(session)}`,\n    type: 'session',\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  // since JS has no Object.prototype.pop()\n  const { __sentry_samplingMethod: samplingMethod, __sentry_sampleRate: sampleRate, ...otherTags } = event.tags || {};\n  event.tags = otherTags;\n\n  const useEnvelope = event.type === 'transaction';\n\n  const req: SentryRequest = {\n    body: JSON.stringify(event),\n    type: event.type || 'event',\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n    });\n    const itemHeaders = JSON.stringify({\n      type: event.type,\n\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { API } from '@sentry/core';\nimport {\n  Event,\n  Response as SentryResponse,\n  SentryRequestType,\n  Status,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport { logger, parseRetryAfterHeader, PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = new PromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected readonly _rateLimits: Record<string, Date> = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(this.options.dsn);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<SentryResponse> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = Status.fromHttpCode(response.status);\n    /**\n     * \"The name is case-insensitive.\"\n     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n     */\n    const limited = this._handleRateLimit(headers);\n    if (limited) logger.warn(`Too many requests, backing off until: ${this._disabledUntil(requestType)}`);\n\n    if (status === Status.Success) {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   */\n  protected _disabledUntil(category: string): Date {\n    return this._rateLimits[category] || this._rateLimits.all;\n  }\n\n  /**\n   * Checks if a category is rate limited\n   */\n  protected _isRateLimited(category: string): boolean {\n    return this._disabledUntil(category) > new Date(Date.now());\n  }\n\n  /**\n   * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.\n   */\n  protected _handleRateLimit(headers: Record<string, string | null>): boolean {\n    const now = Date.now();\n    const rlHeader = headers['x-sentry-rate-limits'];\n    const raHeader = headers['retry-after'];\n\n    if (rlHeader) {\n      // rate limit headers are of the form\n      //     <header>,<header>,..\n      // where each <header> is of the form\n      //     <retry_after>: <categories>: <scope>: <reason_code>\n      // where\n      //     <retry_after> is a delay in ms\n      //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n      //         <category>;<category>;...\n      //     <scope> is what's being limited (org, project, or key) - ignored by SDK\n      //     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n      for (const limit of rlHeader.trim().split(',')) {\n        const parameters = limit.split(':', 2);\n        const headerDelay = parseInt(parameters[0], 10);\n        const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        for (const category of parameters[1].split(';')) {\n          this._rateLimits[category || 'all'] = new Date(now + delay);\n        }\n      }\n      return true;\n    } else if (raHeader) {\n      this._rateLimits.all = new Date(now + parseRetryAfterHeader(now, raHeader));\n      return true;\n    }\n    return false;\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryRequest.url, options)\n          .then(response => {\n            const headers = {\n              'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n              'retry-after': response.headers.get('Retry-After'),\n            };\n            this._handleResponse({\n              requestType: sentryRequest.type,\n              response,\n              headers,\n              resolve,\n              reject,\n            });\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = (): void => {\n          if (request.readyState === 4) {\n            const headers = {\n              'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': request.getResponseHeader('Retry-After'),\n            };\n            this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n          }\n        };\n\n        request.open('POST', sentryRequest.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(sentryRequest.body);\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A flag enabling Sessions Tracking feature.\n   * By default Sessions Tracking is disabled.\n   */\n  autoSessionTracking?: boolean;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { API, captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, logger } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    logger.error(`Missing eventId option in showReportDialog call`);\n    return;\n  }\n  if (!options.dsn) {\n    logger.error(`Missing dsn option in showReportDialog call`);\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.async = true;\n  script.src = new API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  (document.head || document.body).appendChild(script);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false);\n\n  // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n        if (fn && (fn as EventListenerObject).handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (\n      this: any,\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        try {\n          original.call(this, eventName, ((fn as unknown) as WrappedFunction).__sentry_wrapped__, options);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  });\n}\n\nconst debounceDuration: number = 1000;\nlet debounceTimer: number = 0;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction domEventHandler(name: string, handler: Function, debounce: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(() => {\n        handler({ event, name });\n      });\n    } else {\n      handler({ event, name });\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\nfunction keypressEventHandler(handler: Function): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event): void => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '5.30.0';\n","import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self._mergeOptions(clientOptions);\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, callback: () => void): () => void {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const global = getGlobalObject() as { [key: string]: any };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = global[target] && global[target].prototype;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = (fn as unknown) as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler?.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fill(xhr, prop, function(original: WrappedFunction): () => any {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromRejectionWithPrimitive(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  private _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n            value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = false;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const hub = getCurrentHub();\n\n  /**\n   * We should be using `Promise.all([windowLoaded, firstContentfulPaint])` here,\n   * but, as always, it's not available in the IE10-11. Thanks IE.\n   */\n  let loadResolved = document.readyState === 'complete';\n  let fcpResolved = false;\n  const possiblyEndSession = (): void => {\n    if (fcpResolved && loadResolved) {\n      hub.endSession();\n    }\n  };\n  const resolveWindowLoaded = (): void => {\n    loadResolved = true;\n    possiblyEndSession();\n    window.removeEventListener('load', resolveWindowLoaded);\n  };\n\n  hub.startSession();\n\n  if (!loadResolved) {\n    // IE doesn't support `{ once: true }` for event listeners, so we have to manually\n    // attach and then detach it once completed.\n    window.addEventListener('load', resolveWindowLoaded);\n  }\n\n  try {\n    const po = new PerformanceObserver((entryList, po) => {\n      entryList.getEntries().forEach(entry => {\n        if (entry.name === 'first-contentful-paint' && entry.startTime < firstHiddenTime) {\n          po.disconnect();\n          fcpResolved = true;\n          possiblyEndSession();\n        }\n      });\n    });\n\n    // There's no need to even attach this listener if `PerformanceObserver` constructor will fail,\n    // so we do it below here.\n    let firstHiddenTime = document.visibilityState === 'hidden' ? 0 : Infinity;\n    document.addEventListener(\n      'visibilitychange',\n      event => {\n        firstHiddenTime = Math.min(firstHiddenTime, event.timeStamp);\n      },\n      { once: true },\n    );\n\n    po.observe({\n      type: 'paint',\n      buffered: true,\n    });\n  } catch (e) {\n    fcpResolved = true;\n    possiblyEndSession();\n  }\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n"],"sourceRoot":""}